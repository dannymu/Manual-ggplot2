[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Manual de gráficos en R con la librería ggplot2",
    "section": "",
    "text": "1 Acerca del contenido\nEl material presentado se ha desarrollado como una guía en el uso de la librería ggplot2 en R para la creación de gráficos. El objetivo es hacer uso efectivo de la reglas, principios y recomendaciones en la visualización de datos al generar gráficos utilizando lenguaje R y el paquete ggplot2 para crear visualización de datos."
  },
  {
    "objectID": "index.html#descripción",
    "href": "index.html#descripción",
    "title": "Manual de gráficos en R con la librería ggplot2",
    "section": "1.1 Descripción",
    "text": "1.1 Descripción\nLa visualización de datos es la técnica utilizada para brindar información sobre los datos utilizando señales visuales como gráficos, tablas, mapas y muchos otros. Esto es útil ya que ayuda a comprender fácilmente y de forma intuitiva grandes cantidades de datos y, por lo tanto, a tomar mejores decisiones al respecto.\nLa visualización de datos tiene dos propósitos principales:\n\nAnálisis de datos exploratorios e identificación de problemas de datos.\nComunicar conocimientos y resultados\n\nEntre las herramientas más populares de visualización de datos disponibles están Tableau, Plotly, R, Phyton, Google Charts, DataWraper, Flourish , entre otros. Las distintas plataformas de visualización de datos tienen diferentes capacidades, funcionalidades, sin embargo, una de las mayores diferencias de R, es que es lenguaje diseñado para análisis de datos, estadística, visualización e investigación científica. Si bien como lenguaje de programación, su curva de aprendizaje suele resultar compleja, el componente de reproducibilidad y flexibilidad en las funciones que contienen son una de las mayores ventajas de quienes lo utilizan."
  },
  {
    "objectID": "index.html#crear-proyecto",
    "href": "index.html#crear-proyecto",
    "title": "Manual de gráficos en R con la librería ggplot2",
    "section": "1.2 Crear proyecto",
    "text": "1.2 Crear proyecto\nPara seguir estea guía debes descargar el documento curso_VIZ-DI.zip que se encuentra en el Repositorio Ridda2. Al descargar el documento, coloque el archivo en cualquier ubicación de su computador y descomprimalo. Dentro del documento aparecerá un archivo llamado curso_VIZ-DI.Rproj con un icono parecido a un cubo de color celeste y una R (ver imagen), haga doble click sobre el. Se abrirá un proyecto el Rstudio con la configuración del proyecto a utilizar. esta es la carpeta con los códigos y datos iniciales que utilizará en esta guía.\n\n En la carpeta code del proyecto creado, hay un archivo con el nombre cargar-librerias.R, puede ejecutar el código que se muestra en la figura para instalar los paquetes que nececita para el curso. En caso de que no se carguen todas las librerias puede instalar de forma independiente cada librería utilizando el comando install.packages(“nombre libreria”)."
  },
  {
    "objectID": "intro.html#eda-análisis-exploratorio-de-datos",
    "href": "intro.html#eda-análisis-exploratorio-de-datos",
    "title": "2  Conceptos",
    "section": "2.1 EDA (Análisis Exploratorio de Datos)",
    "text": "2.1 EDA (Análisis Exploratorio de Datos)\n\nEn el año de 1971 el matemático Jhon W. Turkey creo una filosofía o enfoque para el análisis de datos que empleaba técnicas (principalmente visuales) para maximizar el conocimiento de un conjunto de datos, extraer variables importantes, detectar valores atípicos, desarrollar modelos, detectar patrones, entre otros, a este conjunto de técnicas, a la cual le llamo E.D.A.(Exploratory data analysis). De manera simplificada el EDA ayuda a determinar las mejores formas de manipular la fuente de datos dada para obtener la respuesta que se necesita garantizando que los resultados sean válidos y aplicables, para ello se apolla de diversos tipos de análisis, donde cada análisis utiliza diveras representaciones gráficas para mostrar los datos de manera visual. \nSegún Turkey, Sólo examinando los datos podemos encontrar lo que no esperamos, por lo que el objetivo del EDA se centra en: \n\nExplorar los datos para descubrir en ellos pautas subyacentes de estructura y relación que de otro modo no se detectarían.\nExplorar para observar si se cumplen los supuestos paramétricos y en función de ello elegir los estadísticos más adecuados en cada caso o realizar las modificaciones oportunas.\n\nEl EDA se vale de diferentes tipos de análisis exploratorios y estas utilizan las representaciones gráficas para mostra de manera visual los datos. Las representaciones graficas pueden darse según el tipo de análisis exploratorio (univariado, bivariado, multivariado), según el tipo de variable o según objetivo del estudio. \nLas técnicas gráficas típicas utilizadas en EDA son:\n\nHistograma\nDiagrama de caja\nGráficos de barras\nDiagrama de puntos\nDiagrama de tallo y hojas\nGráficos multivariables\nMapas de calor\notros"
  },
  {
    "objectID": "intro.html#visualización-de-datos",
    "href": "intro.html#visualización-de-datos",
    "title": "2  Conceptos",
    "section": "2.2 Visualización de datos",
    "text": "2.2 Visualización de datos\nLa visualización de datos es una técnica utilizada para brindar información sobre los datos utilizando señales visuales como gráficos, tablas, mapas y muchos otros. Esto es útil ya que ayuda a comprender fácilmente y de forma intuitiva grandes cantidades de datos y, por lo tanto, a tomar mejores decisiones al respecto.\nLa visualización de datos tiene dos propósitos principales:\n\nAnálisis de datos exploratorios e identificación de problemas de datos.\nComunicar conocimientos y resultados\n\nLas herramientas populares de visualización de datos disponibles son Tableau, Plotly, R, Phyton, Google Charts, DataWraper, Flourish , entre otros. Las distintas plataformas de visualización de datos tienen diferentes capacidades, funcionalidades , sin embargo una de las mayores diferencias de R, es que es lenguaje diseñado para análisis de datos, estadística, visualización e investigación científica. Si bien como lenguaje de programación, su curva de aprendizaje suele resultar compleja, el componente de reprodicibilidad y flexibilidad en las funciones que contienen son una de las mayores ventajas de quienes lo utilizan."
  },
  {
    "objectID": "tema-ggplot-histograma.html",
    "href": "tema-ggplot-histograma.html",
    "title": "3  Librería ggplot",
    "section": "",
    "text": "4 Gráfico de Histograma en R\nUn histograma visualiza la distribución y frecuencia datos durante un intervalo continuo o un período de tiempo determinado de una varible numérica. Cada barra en un histograma representa la frecuencia tabulada en cada intervalo tambien llamado bin.  Los histogramas ayudan a dar una estimación de dónde se concentran los valores, cuáles son los extremos y si hay valores inusuales.\nComo ejemplo podemos genertar un histograma c utilizando la variable numérica flipper_lenght y la geometría geom_histogram(). En ggplot el número de bins o intervalos predeterminado es de 30. Este histograma muestra una distribución de los datos entre los valores de 170 a 230 no simétrica y los valores que más se repiten están entre los intervalos 180 a 200.\n# Gráfico de histograma\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\nEl Diagrama de Caja y bigotes (box and whisker plot en inglés ) es un tipo de gráfico que muestra un resumen de la cantidad de datos en cinco medidas descriptivas, además de intuir su morfología y simetría.\nEste tipo de gráficos nos permite identificar valores atípicos y comparar distribuciones de una variable. Además de conocer de una forma cómoda y rápida como el 50% de los valores centrales se distribuyen, para ello utilizamos la geometría geom_boxplot().\nSe pueden detectar los siguientes valores en el gráfico:\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_boxplot()\n\n\n\n# valores de un boxplot\nsummary(datos_pinguinos$flipper_lenght)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    172     190     197     201     213     231 \n\nboxplot.stats(datos_pinguinos$flipper_lenght)\n\n$stats\n[1] 172 190 197 213 231\n\n$n\n[1] 333\n\n$conf\n[1] 195.0086 198.9914\n\n$out\ninteger(0)\n\n# REsumen de valores centrales y de variacion\nlibrary(summarytools)\n\n\nAttaching package: 'summarytools'\n\n\nThe following object is masked from 'package:tibble':\n\n    view\n\nsummarytools::descr(datos_pinguinos$flipper_lenght)\n\nDescriptive Statistics  \ndatos_pinguinos$flipper_lenght  \nN: 333  \n\n                    flipper_lenght\n----------------- ----------------\n             Mean           200.97\n          Std.Dev            14.02\n              Min           172.00\n               Q1           190.00\n           Median           197.00\n               Q3           213.00\n              Max           231.00\n              MAD            16.31\n              IQR            23.00\n               CV             0.07\n         Skewness             0.36\n      SE.Skewness             0.13\n         Kurtosis            -0.98\n          N.Valid           333.00\n        Pct.Valid           100.00\n\n#Mostrar datos de datos con gráficos\n# view(dfSummary(datos_pinguinos[,-1]))\nLos diagramas de crestas ridges son diagramas de líneas parcialmente superpuestas que crean la impresión de una cadena montañosa. Pueden resultar muy útiles para visualizar cambios en las distribuciones a lo largo del tiempo o el espacio. Para su creación es necesario utilizar la geometria geom_density_ridges() que se encuentra en la libreria ggridges. A diferencia del diagrama de densidad e histograma, este tipo de gráfico necesita que se identifique los valores de X y Y en la estética aes() de ggplot.\n# Gráfico Ridge son color\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght,\n         y=island)) +\n   geom_density_ridges()\n\nPicking joint bandwidth of 3.23\n\n\n\n\n# Gráfico Ridge  color relleno\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght,\n         y=island)) +\n   geom_density_ridges(fill=\"salmon\")\n\nPicking joint bandwidth of 3.23"
  },
  {
    "objectID": "tema-ggplot-histograma.html#cargar-librerias",
    "href": "tema-ggplot-histograma.html#cargar-librerias",
    "title": "3  Librería ggplot",
    "section": "3.1 Cargar librerias",
    "text": "3.1 Cargar librerias\nLibrerias necesarias que se deben haber instalado previamente con install.packages(nombre del paquete) o en el panel Package.\n\nlibrary(tidyverse) # incluye ggplot2\nlibrary(readxl) # funciones para importar xlsx\nlibrary(janitor) # funciones de limpieza\nlibrary(patchwork) #combinar gráficos de ggplot\nlibrary(ggExtra)\nlibrary(ggthemes) # nuevas temas para los plots\nlibrary(plotly) #gráficos interactivos # remotes::install_github(\"plotly/plotly\")\nlibrary(tibble)\nlibrary(skimr) # reseumen numerico\nlibrary(modeest)\nlibrary(ggrepel) # añadir etiquetas a los gráficos\nlibrary(RColorBrewer) #paletas de colores\nlibrary(plotly) #graficos interactivos\nlibrary(corrplot)\nlibrary(ggridges)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#carga-de-datos",
    "href": "tema-ggplot-histograma.html#carga-de-datos",
    "title": "3  Librería ggplot",
    "section": "3.2 Carga de datos",
    "text": "3.2 Carga de datos\nPara cargar los datos debe crear un nuevo archivo script de R y empezar a utilizar lo ssiguientes códigos. \nSe utilizará una versión de los datos palmerpinguins, recopilados y puestos a disposición por la Dra. Kristen Gorman y la Estación Palmer, Antártida LTER , miembro de Long Term Ecological Research Network.\n\ndatos_pinguinos &lt;- read.csv(\"data/data_penguins.csv\")\nhead(datos_pinguinos,5)\n\n  X SPECIES   ISLAND. bill.lenght bill.depth flipper.lenght MALE FEMALE\n1 1  Adelie Torgersen        39.1       18.7            181 3750     NA\n2 2  Adelie Torgersen        39.5       17.4            186   NA   3800\n3 3  Adelie Torgersen        40.3       18.0            195   NA   3250\n4 4  Adelie Torgersen        36.7       19.3            193   NA   3450\n5 5  Adelie Torgersen        39.3       20.6            190 3650     NA"
  },
  {
    "objectID": "tema-ggplot-histograma.html#librería-ggplot2",
    "href": "tema-ggplot-histograma.html#librería-ggplot2",
    "title": "3  Librería ggplot",
    "section": "3.3 Librería ggplot2",
    "text": "3.3 Librería ggplot2\nEl paquete ggplot2 es una paquete incluido en la librería tidyverse (incluye: ggplot2, dplyr, tidyr, readr, purr,tibble, forcats, lubridate), cuya finalidad es entender los gráficos como parte integrar del procesamiento y modelado de los datos, basándose en la idea de Leland Wilkinson, lgramática de los gráficos. Este concepto permite combinar diferentes elementos en el gráficos como si fueran capas superpuestas para vincularlas a los datos, además de mapear atributos estéticos como , color, forma, tamaño y la visualización de objetos geométricos (puntos, barras, lineas). gplot es la abreviación de Grammar of Graphics plot.\nUn gráfico en ggplot se compone de las siguientes capas:\n\nDatos: conjunto de datos.\nMapeado de elementos (aesthetics): ejes, color, forma, tamaño, etc (en función de los datos)\nElementos geométricos (geom): puntos, líneas, barras, polígonos, etc.\nComponer gráficas (facet): visualizar varias gráficas a la vez.\nTransformaciones estadísticas (stat): ordenar, resumir, agrupar, etc.\nSistema de coordenadas (coord): coordenadas, grids, etc.\nTemas (theme): fuente, tamaño de letra, subtítulos, captions, leyenda, ejes, etc."
  },
  {
    "objectID": "tema-ggplot-histograma.html#operador-pipe",
    "href": "tema-ggplot-histograma.html#operador-pipe",
    "title": "3  Librería ggplot",
    "section": "3.4 Operador pipe",
    "text": "3.4 Operador pipe\nEl operador pipe que simbólicamente se puede utilizar como %&gt;% o |&gt; (versiones recientes) se utiliza para tomar el resultado de unaexpresión y pasarlo a la siguiente expresión, como si estuvieras encajando o uniendo las operaciones una después de la otra. Para utilizar el simbolo del pipe, podemos utilizar las siguientes teclas CTRL+SHIFT+M.  Este componente es parte de los elementos utilizados en la transformación de datos o Data Wrangling y se utilizará en algunos códigos en este contenido.\n\n# Ejemplo 1\n# Listar los primeros 10 obs de la tabla\nhead(datos_pinguinos, 10)\n\n    X SPECIES   ISLAND. bill.lenght bill.depth flipper.lenght MALE FEMALE\n1   1  Adelie Torgersen        39.1       18.7            181 3750     NA\n2   2  Adelie Torgersen        39.5       17.4            186   NA   3800\n3   3  Adelie Torgersen        40.3       18.0            195   NA   3250\n4   4  Adelie Torgersen        36.7       19.3            193   NA   3450\n5   5  Adelie Torgersen        39.3       20.6            190 3650     NA\n6   6  Adelie Torgersen        38.9       17.8            181   NA   3625\n7   7  Adelie Torgersen        39.2       19.6            195 4675     NA\n8   8  Adelie Torgersen        41.1       17.6            182   NA   3200\n9   9  Adelie Torgersen        38.6       21.2            191 3800     NA\n10 10  Adelie Torgersen        34.6       21.1            198 4400     NA\n\n# Utilizando pipe\n# llamamos el tibble de datos\ndatos_pinguinos |&gt; \n  head(10)\n\n    X SPECIES   ISLAND. bill.lenght bill.depth flipper.lenght MALE FEMALE\n1   1  Adelie Torgersen        39.1       18.7            181 3750     NA\n2   2  Adelie Torgersen        39.5       17.4            186   NA   3800\n3   3  Adelie Torgersen        40.3       18.0            195   NA   3250\n4   4  Adelie Torgersen        36.7       19.3            193   NA   3450\n5   5  Adelie Torgersen        39.3       20.6            190 3650     NA\n6   6  Adelie Torgersen        38.9       17.8            181   NA   3625\n7   7  Adelie Torgersen        39.2       19.6            195 4675     NA\n8   8  Adelie Torgersen        41.1       17.6            182   NA   3200\n9   9  Adelie Torgersen        38.6       21.2            191 3800     NA\n10 10  Adelie Torgersen        34.6       21.1            198 4400     NA\n\n# Ejemplo 2\n# Resumen de lso datos \nsummary(datos_pinguinos)\n\n       X         SPECIES            ISLAND.           bill.lenght   \n Min.   :  1   Length:333         Length:333         Min.   :32.10  \n 1st Qu.: 84   Class :character   Class :character   1st Qu.:39.50  \n Median :167   Mode  :character   Mode  :character   Median :44.50  \n Mean   :167                                         Mean   :43.99  \n 3rd Qu.:250                                         3rd Qu.:48.60  \n Max.   :333                                         Max.   :59.60  \n                                                                    \n   bill.depth    flipper.lenght      MALE          FEMALE    \n Min.   :13.10   Min.   :172    Min.   :3250   Min.   :2700  \n 1st Qu.:15.60   1st Qu.:190    1st Qu.:3900   1st Qu.:3350  \n Median :17.30   Median :197    Median :4300   Median :3650  \n Mean   :17.16   Mean   :201    Mean   :4546   Mean   :3862  \n 3rd Qu.:18.70   3rd Qu.:213    3rd Qu.:5312   3rd Qu.:4550  \n Max.   :21.50   Max.   :231    Max.   :6300   Max.   :5200  \n                                NA's   :165    NA's   :168   \n\n# Usando pipe\ndatos_pinguinos |&gt; \n  summary()\n\n       X         SPECIES            ISLAND.           bill.lenght   \n Min.   :  1   Length:333         Length:333         Min.   :32.10  \n 1st Qu.: 84   Class :character   Class :character   1st Qu.:39.50  \n Median :167   Mode  :character   Mode  :character   Median :44.50  \n Mean   :167                                         Mean   :43.99  \n 3rd Qu.:250                                         3rd Qu.:48.60  \n Max.   :333                                         Max.   :59.60  \n                                                                    \n   bill.depth    flipper.lenght      MALE          FEMALE    \n Min.   :13.10   Min.   :172    Min.   :3250   Min.   :2700  \n 1st Qu.:15.60   1st Qu.:190    1st Qu.:3900   1st Qu.:3350  \n Median :17.30   Median :197    Median :4300   Median :3650  \n Mean   :17.16   Mean   :201    Mean   :4546   Mean   :3862  \n 3rd Qu.:18.70   3rd Qu.:213    3rd Qu.:5312   3rd Qu.:4550  \n Max.   :21.50   Max.   :231    Max.   :6300   Max.   :5200  \n                                NA's   :165    NA's   :168   \n\n# Ejemplo 3\n# Seleccionar las columnas 3 y 5 del tibble datospinguinos\n# donde island es igual a Torgersen\n# mostrar priemaras 5 filas\nhead(datos_pinguinos[datos_pinguinos$ISLAND.==\"Torgersen\",c(4,5)],5)\n\n  bill.lenght bill.depth\n1        39.1       18.7\n2        39.5       17.4\n3        40.3       18.0\n4        36.7       19.3\n5        39.3       20.6\n\n# Utilizando pipe\ndatos_pinguinos |&gt; \n  filter(ISLAND.==\"Torgersen\") |&gt; \n  select(bill.lenght,bill.depth) |&gt; \n  head(5)\n\n  bill.lenght bill.depth\n1        39.1       18.7\n2        39.5       17.4\n3        40.3       18.0\n4        36.7       19.3\n5        39.3       20.6"
  },
  {
    "objectID": "tema-ggplot-histograma.html#estructura-de-ggplot",
    "href": "tema-ggplot-histograma.html#estructura-de-ggplot",
    "title": "3  Librería ggplot",
    "section": "3.5 Estructura de ggplot",
    "text": "3.5 Estructura de ggplot\nLa estrutura base de ggplot es la siguiente:"
  },
  {
    "objectID": "tema-ggplot-histograma.html#función-ggplot",
    "href": "tema-ggplot-histograma.html#función-ggplot",
    "title": "3  Librería ggplot",
    "section": "3.6 Función ggplot()",
    "text": "3.6 Función ggplot()\nUtilizando solo la función ggplot(), se crea un lienzo o espacio de trabajo para la creación de un gráfico.\n\nggplot()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#cargar-datos-en-ggplot",
    "href": "tema-ggplot-histograma.html#cargar-datos-en-ggplot",
    "title": "3  Librería ggplot",
    "section": "3.7 Cargar datos en ggplot",
    "text": "3.7 Cargar datos en ggplot\ndata: es el nombre del tabla en formato tibble o dataframe y se utiliza para cargar los datos, en este caso la tabla datos_pinguinos.\n\nggplot(data=datos_pinguinos)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#mapeado-y-estética",
    "href": "tema-ggplot-histograma.html#mapeado-y-estética",
    "title": "3  Librería ggplot",
    "section": "3.8 Mapeado y estética",
    "text": "3.8 Mapeado y estética\nmapping: define el mapeo estético de señales proporcionadas por el set de datos, las variables que modifican estas señales deben estar integradas en aes() que integran las escalas, x, y, que representarán cada observación según variables, tambien en este apartado se identifican otras señales como color, size. En este ejemplo utilizaremos solo la varable SPECIES.  Se mostrará en el eje de las X los datos CATEGORICOS de la variable SPECIES.\n\nggplot(data = datos_pinguinos, \n      mapping = aes(x=SPECIES))"
  },
  {
    "objectID": "tema-ggplot-histograma.html#geometría",
    "href": "tema-ggplot-histograma.html#geometría",
    "title": "3  Librería ggplot",
    "section": "3.9 Geometría",
    "text": "3.9 Geometría\nPara poder dibujar el gráfico, ggplot necesita que añadamos una nueva capa de la geometría o tipo de gráfico a utilizar. Para añadir la nueva capa debemos de colocar el signo de + al final de la línea de mapping y luego el tipo de geometría Geometrías ggplot.  En este ejemplo utilizaremos geom_bar(): representa el tipo de geometría de barras que muestra la figura de los gráficos que interperta la agrupación de datos de la variable categórica SPECIES.\n\nggplot(data = datos_pinguinos, \n      mapping = aes(x=SPECIES))+\n  geom_bar()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#ejemplo-de-gráficos-en-ggplot",
    "href": "tema-ggplot-histograma.html#ejemplo-de-gráficos-en-ggplot",
    "title": "3  Librería ggplot",
    "section": "3.10 Ejemplo de gráficos en ggplot",
    "text": "3.10 Ejemplo de gráficos en ggplot\nA manera de ejemplo mostraremos tres tipos de gráficos en ggplot con diferentes geometrías, solo con el objetivo de ver la estructura básica funcionando donde con los mismos datos solo cambio el tipo de geometría geom_. Al avanzar el contenido se mostrará como funciona el paquete ggplot y el funcionamiento de estas geometrias de forma más detallada.\n\n#Ejemplo de gráfico de puntos\nggplot(data = datos_pinguinos, \n       mapping = aes(x=bill.lenght, y=bill.depth))+\n       geom_point()\n\n\n\n# Ejemplo de gráfico de barras una variable\nggplot(data = datos_pinguinos, \n       mapping = aes(x=SPECIES))+\n       geom_bar()\n\n\n\n# Ejemplo de gráfico de barras dos variables\nggplot(data = datos_pinguinos, \n       mapping = aes(x=factor(ISLAND.), y=bill.lenght))+\n       geom_col()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#tipos-de-datos-en-ggplot",
    "href": "tema-ggplot-histograma.html#tipos-de-datos-en-ggplot",
    "title": "3  Librería ggplot",
    "section": "3.11 Tipos de datos en ggplot",
    "text": "3.11 Tipos de datos en ggplot\nPara hacer gráficos con ggplot es necesario que el conjunto de datos sea un tipo de datos estructurado de dos dimensiones que permiten diferentes tipos de datos, por lo que son heterogéneos, en este caso , este tipo de estructuras de datos en R, son los dataframes o los tibble.\n\n3.11.1 Objeto tipo dataframe\nLos data frame son datos estructurados, lo que comunmente conocemos como tablas. Su mayor características es que los datos que lo conforman pueden ser de diferentes tipos, numéricos (discretos, continuos), caracteres, lógicos, etc. Una de sus limitantes es que al cargar los datos R puede modificarr el nombre de las variables, si contienen espacios en blancos o algunos carateres especiales, colocan puntos a la variable.\n\n# data.frame mtcars muestra todas las filas, se indica con head, mostrar solo 25\nhead(datos_pinguinos,25)\n\n    X SPECIES   ISLAND. bill.lenght bill.depth flipper.lenght MALE FEMALE\n1   1  Adelie Torgersen        39.1       18.7            181 3750     NA\n2   2  Adelie Torgersen        39.5       17.4            186   NA   3800\n3   3  Adelie Torgersen        40.3       18.0            195   NA   3250\n4   4  Adelie Torgersen        36.7       19.3            193   NA   3450\n5   5  Adelie Torgersen        39.3       20.6            190 3650     NA\n6   6  Adelie Torgersen        38.9       17.8            181   NA   3625\n7   7  Adelie Torgersen        39.2       19.6            195 4675     NA\n8   8  Adelie Torgersen        41.1       17.6            182   NA   3200\n9   9  Adelie Torgersen        38.6       21.2            191 3800     NA\n10 10  Adelie Torgersen        34.6       21.1            198 4400     NA\n11 11  Adelie Torgersen        36.6       17.8            185   NA   3700\n12 12  Adelie Torgersen        38.7       19.0            195   NA   3450\n13 13  Adelie Torgersen        42.5       20.7            197 4500     NA\n14 14  Adelie Torgersen        34.4       18.4            184   NA   3325\n15 15  Adelie Torgersen        46.0       21.5            194 4200     NA\n16 16  Adelie    Biscoe        37.8       18.3            174   NA   3400\n17 17  Adelie    Biscoe        37.7       18.7            180 3600     NA\n18 18  Adelie    Biscoe        35.9       19.2            189   NA   3800\n19 19  Adelie    Biscoe        38.2       18.1            185 3950     NA\n20 20  Adelie    Biscoe        38.8       17.2            180 3800     NA\n21 21  Adelie    Biscoe        35.3       18.9            187   NA   3800\n22 22  Adelie    Biscoe        40.6       18.6            183 3550     NA\n23 23  Adelie    Biscoe        40.5       17.9            187   NA   3200\n24 24  Adelie    Biscoe        37.9       18.6            172   NA   3150\n25 25  Adelie    Biscoe        40.5       18.9            180 3950     NA\n\n# Verificar Objeto tipo data.frame\nclass(datos_pinguinos)\n\n[1] \"data.frame\"\n\n\n\n\n3.11.2 Objeto tipo tibble\nLos tibble son un tipo de data frame para una gestión más ágil, eficiente y coherente. Las tablas en formato tibble tienen 4 ventajas principales frente a los data frame:\n\nPermiten imprimir por consola la tabla con mayor información de las variables, solo imprime por defecto las primeras filas (todas si son 20 o menos, 10 si son más de 20 filas). Puedes imprimir las filas y columnas que quieras con print(nombre de tibble), pero por defecto te aseguras de no saturar la consola.\nMantiene la integridad de los datos (no cambia los tipos de las variables y hace una carga de datos inteligente, interpretando los tipos de datos y colocandolos encima de cada variable.\nSi accedes a una columna que no existe avisa con un warning.\nNo solo no cambiará el tipo de datos sino que no cambiará el nombre de las variables (los data frame transforma los caracteres que no sean letras).\n\n\n# transformat dataframe a tible \ndatos_pinguinos &lt;- as_tibble(datos_pinguinos)\n\n# Verificar Objeto tipo tibble\nclass(datos_pinguinos)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n# tibble imprime solo las primeras 10 \n# coloca el tipo de dato sencima del nombre de la variable\nhead(datos_pinguinos,10)\n\n# A tibble: 10 × 8\n       X SPECIES ISLAND.   bill.lenght bill.depth flipper.lenght  MALE FEMALE\n   &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;          &lt;int&gt; &lt;int&gt;  &lt;int&gt;\n 1     1 Adelie  Torgersen        39.1       18.7            181  3750     NA\n 2     2 Adelie  Torgersen        39.5       17.4            186    NA   3800\n 3     3 Adelie  Torgersen        40.3       18              195    NA   3250\n 4     4 Adelie  Torgersen        36.7       19.3            193    NA   3450\n 5     5 Adelie  Torgersen        39.3       20.6            190  3650     NA\n 6     6 Adelie  Torgersen        38.9       17.8            181    NA   3625\n 7     7 Adelie  Torgersen        39.2       19.6            195  4675     NA\n 8     8 Adelie  Torgersen        41.1       17.6            182    NA   3200\n 9     9 Adelie  Torgersen        38.6       21.2            191  3800     NA\n10    10 Adelie  Torgersen        34.6       21.1            198  4400     NA\n\n\n\n\n3.11.3 Resumen de datos\nExisten diversas formas de mostrar la estructura o resumen de datos en R, en este caso los datos datos_pinguinos (dataframe o tibble) con sus tipos de datos según variables es utilizando la función summary() y glipmse(), esto permite identificar anomalías en los nombre de las variables o en el tipo de variables y es un elemento indispensable para conocer los datos y sus tipos.\n\n# Muestra la estructura de los datos y el tipo de datos\ndatos_pinguinos |&gt; \n  summary()\n\n       X         SPECIES            ISLAND.           bill.lenght   \n Min.   :  1   Length:333         Length:333         Min.   :32.10  \n 1st Qu.: 84   Class :character   Class :character   1st Qu.:39.50  \n Median :167   Mode  :character   Mode  :character   Median :44.50  \n Mean   :167                                         Mean   :43.99  \n 3rd Qu.:250                                         3rd Qu.:48.60  \n Max.   :333                                         Max.   :59.60  \n                                                                    \n   bill.depth    flipper.lenght      MALE          FEMALE    \n Min.   :13.10   Min.   :172    Min.   :3250   Min.   :2700  \n 1st Qu.:15.60   1st Qu.:190    1st Qu.:3900   1st Qu.:3350  \n Median :17.30   Median :197    Median :4300   Median :3650  \n Mean   :17.16   Mean   :201    Mean   :4546   Mean   :3862  \n 3rd Qu.:18.70   3rd Qu.:213    3rd Qu.:5312   3rd Qu.:4550  \n Max.   :21.50   Max.   :231    Max.   :6300   Max.   :5200  \n                                NA's   :165    NA's   :168   \n\n# La función glimpse es otra forma de mostrar los datos\n# sobre todo cuando son muchas variables\n# Muestra tambien el tipo de dato por variable\n# Permite mostrar la estructura de datos de forma más ordenada\ndatos_pinguinos |&gt; \n  glimpse()\n\nRows: 333\nColumns: 8\n$ X              &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ SPECIES        &lt;chr&gt; \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adel…\n$ ISLAND.        &lt;chr&gt; \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"To…\n$ bill.lenght    &lt;dbl&gt; 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6, 3…\n$ bill.depth     &lt;dbl&gt; 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2, 2…\n$ flipper.lenght &lt;int&gt; 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 185, …\n$ MALE           &lt;int&gt; 3750, NA, NA, NA, 3650, NA, 4675, NA, 3800, 4400, NA, N…\n$ FEMALE         &lt;int&gt; NA, 3800, 3250, 3450, NA, 3625, NA, 3200, NA, NA, 3700,…\n\n\n\n\n3.11.4 Limpieza de nombre de variables\nSi bien la limpieza de los datos es un elemento importante al visualizar datos, no es un tema que veremos en este curso, sin embargo podemos evaluar si el nombre de las variables no están normalizados, que tengan espacios en blanco, ya que si la estructura de datos es un dataframe, R los carga con um punto (.), además de que algunas están en mayúscula y otra en minúscula. Por otro lado podemos eliminar las columnas irrelevantes como la columna X en el tibble, que no representa ningún dato de interés en la tabla.\n\n# Nombre de las variables\ndatos_pinguinos |&gt; \n  names()\n\n[1] \"X\"              \"SPECIES\"        \"ISLAND.\"        \"bill.lenght\"   \n[5] \"bill.depth\"     \"flipper.lenght\" \"MALE\"           \"FEMALE\"        \n\n# limpieza y normalización de nombres de las variables con janitor\ndatos_pinguinos &lt;- janitor::clean_names(datos_pinguinos)\n\n# eliminar primera columna\ndatos_pinguinos &lt;- datos_pinguinos[,-1]\ndatos_pinguinos |&gt; \n  names()\n\n[1] \"species\"        \"island\"         \"bill_lenght\"    \"bill_depth\"    \n[5] \"flipper_lenght\" \"male\"           \"female\"        \n\n# Resumen de datos\ndatos_pinguinos |&gt; \n  glimpse()\n\nRows: 333\nColumns: 7\n$ species        &lt;chr&gt; \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adel…\n$ island         &lt;chr&gt; \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"To…\n$ bill_lenght    &lt;dbl&gt; 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6, 3…\n$ bill_depth     &lt;dbl&gt; 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2, 2…\n$ flipper_lenght &lt;int&gt; 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 185, …\n$ male           &lt;int&gt; 3750, NA, NA, NA, 3650, NA, 4675, NA, 3800, 4400, NA, N…\n$ female         &lt;int&gt; NA, 3800, 3250, 3450, NA, 3625, NA, 3200, NA, NA, 3700,…\n\n\n\n\n3.11.5 Transformación de variables\nEl resumen de datos tambien permite identificar las variables por tipo, en este caso, dos variables han sido identificadas de tipo caracter species, island, pero realmente son variables categoricas. Una representa las especies de pinguinos y la otra la isla donde se realizo la observación, por lo que debe realizarse su transformación a tipo categórico o en este caso de tipo factor, para ello utilizamos as.factor(), para transformar la variable.\n\n#Verifcar si una variable tiene datos cualitaticos repetidos \n# lo que indica que puede ser una var categorica\ntable(datos_pinguinos$species)\n\n\n   Adelie Chinstrap    Gentoo \n      146        68       119 \n\n#resultado\n# Adelie Chinstrap    Gentoo \n#  146        68       119 \n\n\n# Transformar variables de tipo caracter a factor\ndatos_pinguinos$species &lt;- as.factor(datos_pinguinos$species)\ndatos_pinguinos$island&lt;- as.factor(datos_pinguinos$island)\n\n#verificar variables\ndatos_pinguinos |&gt; \n  glimpse()\n\nRows: 333\nColumns: 7\n$ species        &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie,…\n$ island         &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, …\n$ bill_lenght    &lt;dbl&gt; 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6, 3…\n$ bill_depth     &lt;dbl&gt; 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2, 2…\n$ flipper_lenght &lt;int&gt; 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 185, …\n$ male           &lt;int&gt; 3750, NA, NA, NA, 3650, NA, 4675, NA, 3800, 4400, NA, N…\n$ female         &lt;int&gt; NA, 3800, 3250, 3450, NA, 3625, NA, 3200, NA, NA, 3700,…\n\n\n\n\n3.11.6 Tidy data\nUn elemento importante en los datos que utiliza ggplot, no es solo la estructura de la tabla (tibble o dataframe) ya que es posible generar visualizaciones utilizando cualquiera de las dos estructura de datos, lo que si es relevante es que ggplot solo trabaja con datos tipo tidy o datos ordenados.\nLa librería dplyr, ggplot2 y todos los demás paquetes de tidyverse están diseñados para funcionar con datos ordenados.\nLos datos ordenados es una forma de mostrar los datos basados en tres reglas interrelacionadas:\n\nCada variable debe tener su propia columna.\nCada observación debe tener su propia fila.\nCada valor debe tener su propia celda.\n\n\n\ndatos_pinguinos |&gt; \n  head(10)\n\n# A tibble: 10 × 7\n   species island    bill_lenght bill_depth flipper_lenght  male female\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;      &lt;dbl&gt;          &lt;int&gt; &lt;int&gt;  &lt;int&gt;\n 1 Adelie  Torgersen        39.1       18.7            181  3750     NA\n 2 Adelie  Torgersen        39.5       17.4            186    NA   3800\n 3 Adelie  Torgersen        40.3       18              195    NA   3250\n 4 Adelie  Torgersen        36.7       19.3            193    NA   3450\n 5 Adelie  Torgersen        39.3       20.6            190  3650     NA\n 6 Adelie  Torgersen        38.9       17.8            181    NA   3625\n 7 Adelie  Torgersen        39.2       19.6            195  4675     NA\n 8 Adelie  Torgersen        41.1       17.6            182    NA   3200\n 9 Adelie  Torgersen        38.6       21.2            191  3800     NA\n10 Adelie  Torgersen        34.6       21.1            198  4400     NA\n\n\nAdicional a estas tres reglas podemos identificar que un conjunto de datos no está ordenado porque:\n\nLos encabezados de columna son valores, no nombres de variables\nLas variables se almacenan tanto en filas como en columnas.\nLos datos de una supuesta variable están en diferentes columnas.\n\nEn el caso del tibble datos_pinguinos se observa que existen dos variables male y female que contienen los valores de la masa corporal de los pinguinos body_mass_g.\nDentro de las reglas de los datos tidy, cada variable debe tener su propia columna, La masa corporal de los pinguinos debiera estar en una sola columan y no separada en las variables male y female, por otro lado, los encabezados de columna son valores, no nombres de variables, las variables male y female debieran estra en una variable del tipo sexo, que corresponde a una categoria.\nEsto indica que esta tibble datos_pinguinos no esta ordenado, este tipo de tabla se conoce como data wider o tabla ancha, ya que su crecimiento es a lo ancho de la tabla, por lo que debemos transformar estos datos en formato data larga o data longer, datos que crecen a lo largo de la tabla.Para ellos haremos usos de las funciones pivotes de R, especificamente pivot_longer().\n\n# Transformar  a datos tidy\n# Para transformar los datos a tidy, se identifican las columnas o variables \n# que se desean unir y convertir en una sola variable\n# se coloca el nombre de la nueva variable con names_to\n# los datos que contenian las variable male y female pasan a otra variable \n# a través de values_to.\n\ndatos_pinguinos_tidy &lt;- datos_pinguinos |&gt; \n                           pivot_longer(c(\"male\":\"female\"), \n                           names_to = \"sex\", \n                           values_to = \"body_mass_g\")\n\n# numero de observaciones generadas 666\nnrow(datos_pinguinos_tidy)\n\n[1] 666\n\ndatos_pinguinos_tidy |&gt; \n  head(10)\n\n# A tibble: 10 × 7\n   species island    bill_lenght bill_depth flipper_lenght sex    body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;      &lt;dbl&gt;          &lt;int&gt; &lt;chr&gt;        &lt;int&gt;\n 1 Adelie  Torgersen        39.1       18.7            181 male          3750\n 2 Adelie  Torgersen        39.1       18.7            181 female          NA\n 3 Adelie  Torgersen        39.5       17.4            186 male            NA\n 4 Adelie  Torgersen        39.5       17.4            186 female        3800\n 5 Adelie  Torgersen        40.3       18              195 male            NA\n 6 Adelie  Torgersen        40.3       18              195 female        3250\n 7 Adelie  Torgersen        36.7       19.3            193 male            NA\n 8 Adelie  Torgersen        36.7       19.3            193 female        3450\n 9 Adelie  Torgersen        39.3       20.6            190 male          3650\n10 Adelie  Torgersen        39.3       20.6            190 female          NA\n\n\nAl mostrar los datos en formato tidy, podemos observar que se realizó el pivote de la tabla y se crearon las nuevas variables sex y body_mass_g, sin embargo, dentro de los datos había valores vacios (NA) en la tabla original que tambien se cargaron en esta tabla ordenada. Para eliminar estos datos debemos realizar nuevamente el proceso de pivoteo e indicarle a pivot_longer() con values_drop_na = TRUE para que elimine los datos vacios.\n\n# transformar a datos tidy eliminados filas vacias\n\ndatos_pinguinos &lt;- datos_pinguinos |&gt; \n                           pivot_longer(c(\"male\":\"female\"), \n                           names_to = \"sex\", \n                           values_to = \"body_mass_g\",\n                           values_drop_na = TRUE)\n\n# numero de observaciones generadas 333\nnrow(datos_pinguinos)\n\n[1] 333\n\n# Resumend de datos , donde ya no se muestran los datos NA\ndatos_pinguinos |&gt; \n  head(10)\n\n# A tibble: 10 × 7\n   species island    bill_lenght bill_depth flipper_lenght sex    body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;      &lt;dbl&gt;          &lt;int&gt; &lt;chr&gt;        &lt;int&gt;\n 1 Adelie  Torgersen        39.1       18.7            181 male          3750\n 2 Adelie  Torgersen        39.5       17.4            186 female        3800\n 3 Adelie  Torgersen        40.3       18              195 female        3250\n 4 Adelie  Torgersen        36.7       19.3            193 female        3450\n 5 Adelie  Torgersen        39.3       20.6            190 male          3650\n 6 Adelie  Torgersen        38.9       17.8            181 female        3625\n 7 Adelie  Torgersen        39.2       19.6            195 male          4675\n 8 Adelie  Torgersen        41.1       17.6            182 female        3200\n 9 Adelie  Torgersen        38.6       21.2            191 male          3800\n10 Adelie  Torgersen        34.6       21.1            198 male          4400\n\n#transformar la variable sex a factor\ndatos_pinguinos$sex &lt;- as.factor(datos_pinguinos$sex)\n\n# write.csv(datos_pinguinos, \"data/data_penguins_clean.csv\")\n\n\n\n3.11.7 Resumen de datos con función skim()\nOtra de las funciones para hacer resumen de datos es la función skim(), donde se muestra el número de observaciones, variables y tipos de datos que contiene la tabla con las modificaciones realizadas, además de otras informaciones de interés, como la distribución de los datos a través de gráficos de histograma.\n\n# Resumen Numérico de la tabla\ndatos_pinguinos |&gt;  \n   skim()\n\n\nData summary\n\n\nName\ndatos_pinguinos\n\n\nNumber of rows\n333\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nspecies\n0\n1\nFALSE\n3\nAde: 146, Gen: 119, Chi: 68\n\n\nisland\n0\n1\nFALSE\n3\nBis: 163, Dre: 123, Tor: 47\n\n\nsex\n0\n1\nFALSE\n2\nmal: 168, fem: 165\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nbill_lenght\n0\n1\n43.99\n5.47\n32.1\n39.5\n44.5\n48.6\n59.6\n▃▇▇▆▁\n\n\nbill_depth\n0\n1\n17.16\n1.97\n13.1\n15.6\n17.3\n18.7\n21.5\n▅▆▇▇▂\n\n\nflipper_lenght\n0\n1\n200.97\n14.02\n172.0\n190.0\n197.0\n213.0\n231.0\n▂▇▃▅▃\n\n\nbody_mass_g\n0\n1\n4207.06\n805.22\n2700.0\n3550.0\n4050.0\n4775.0\n6300.0\n▃▇▅▃▂"
  },
  {
    "objectID": "tema-ggplot-histograma.html#modifcar-el-número-de-bins",
    "href": "tema-ggplot-histograma.html#modifcar-el-número-de-bins",
    "title": "3  Librería ggplot",
    "section": "4.1 Modifcar el número de bins",
    "text": "4.1 Modifcar el número de bins\nAl modificar el número de intervalos, en este caso menos intervalos, más datos se agrupan en cada intervalo, por lo que el el eje de las y tiende a incrementarse.\n\n# Modificar número de bins\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(bins = 15)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#modificar-color-de-las-líneas",
    "href": "tema-ggplot-histograma.html#modificar-color-de-las-líneas",
    "title": "3  Librería ggplot",
    "section": "4.2 Modificar color de las líneas",
    "text": "4.2 Modificar color de las líneas\nUtilizando nuevamente el intervalo de 30, es un poco complicado poder identifcar los intervalos con claridad, es por ello que modificaremos el color de linea de cada intervalo con la propiedad color =“#ffffff”. El valor entre comilla representa el color hexadecimal del blanco, pero podemos utilizar los nombres de los colores básicos en inglés (red, blue, yellow, black, white, brown, entre otros).\n\n# Modificar el color de las lineas\n# Bins predeterminados = 30\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(color =\"#ffffff\", bins = 30)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#modificar-color-de-relleno-bins",
    "href": "tema-ggplot-histograma.html#modificar-color-de-relleno-bins",
    "title": "3  Librería ggplot",
    "section": "4.3 Modificar color de relleno bins",
    "text": "4.3 Modificar color de relleno bins\nPara modificar el color del relleno de cada intervalo utilizamos la función fill. Los colores se pueden colocar con el nombre del color o con el código hexadecimal. Colores como nombre  Colores hexadecimales\n\n# Gráfico de histograma con colores en los bins para identificar \ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(color =\"#ffffff\" , \n                 fill = \"#EF3C49\", \n                 bins = 30)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#añadir-datos-al-gráfico",
    "href": "tema-ggplot-histograma.html#añadir-datos-al-gráfico",
    "title": "3  Librería ggplot",
    "section": "4.4 Añadir datos al gráfico",
    "text": "4.4 Añadir datos al gráfico\nPara añadir datos del conteo de las observaciones en un histograma, podemos utilizar la función stat_bin(), a esta función se le añade las propiedades label=..count.. , que realiza el conteo por bins, además de la propiedad geom=“text” que indica que la propiedad es de tipo texto.\n\n# Gráfico de histograma con colores en los bins para identificar \ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(color =\"#ffffff\" , \n                 fill = \"#EF3C49\", \n                 bins=30)+\n  stat_bin(aes(label=..count..), \n            geom=\"text\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "tema-ggplot-histograma.html#ajustar-datos-en-gráfico",
    "href": "tema-ggplot-histograma.html#ajustar-datos-en-gráfico",
    "title": "3  Librería ggplot",
    "section": "4.5 Ajustar datos en gráfico",
    "text": "4.5 Ajustar datos en gráfico\nSe puede ajustar la posición del texto utilizando las propiedades vjuts (posición vertical) y hjust(posición horizontal) en la función stat_bin() que permiten mover la posición del texto en horizontal y vertical.\n\n# Gráfico de histograma con colores en los bins para identificar \ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(color =\"#ffffff\" , \n                 fill = \"#EF3C49\", \n                 bins=30)+\n  stat_bin(aes(label=..count..), \n           vjust=-0.1, \n           hjust= 0.5,  \n           geom=\"text\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "tema-ggplot-histograma.html#datos-en-gráfico-bins",
    "href": "tema-ggplot-histograma.html#datos-en-gráfico-bins",
    "title": "3  Librería ggplot",
    "section": "4.6 Datos en gráfico (bins)",
    "text": "4.6 Datos en gráfico (bins)\nEs importante resaltar que el bins=30 es el valor predeterminado en un histograma, si el valor se modifica como en el ejemplo, este valor se debe tambien modificar en la función stat_bin() , sino los datos no coincidiran en el gráfico.\n\n# Gráfico de histograma con bins =15\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(color =\"#ffffff\" , \n                 fill = \"#EF3C49\", \n                 bins=15)+\n  stat_bin(aes(label=..count..), \n           vjust=-0.1, \n           hjust= 0.5,  \n           geom=\"text\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n# Gráfico de histograma con bins =15 en el histograma y en el texto\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(color =\"#ffffff\" , \n                 fill = \"#EF3C49\", \n                 bins=15)+\n  stat_bin(aes(label=..count..), \n           vjust=-0.1, \n           hjust= 0.5,  \n           geom=\"text\",\n           bins = 15)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#añadir-info-al-gráfico",
    "href": "tema-ggplot-histograma.html#añadir-info-al-gráfico",
    "title": "3  Librería ggplot",
    "section": "4.7 Añadir info al gráfico",
    "text": "4.7 Añadir info al gráfico\nPara añadir una línea que intercepte o se dibuje en una posición x del gráfico se utiliza la función geom_vline(). xintercept = posición de intersección de la línea.  color = color de la línea.  size = tamaño de la línea. \nValor y tipo de linea,\n\nlinetype = 0 linetype = “blank”\nlinetype = 1 linetype = “solid”\nlinetype = 2 linetype = “dashed”\nlinetype = 3 linetype = “dotted”\nlinetype = 4 linetype = “dotdash”\nlinetype = 5 linetype = “longdash”\nlinetype = 6 linetype = “twodash”\n\n\n#calculo de la media y la mediana\nmedia &lt;- mean(datos_pinguinos$flipper_lenght)\nmedia\n\n[1] 200.967\n\nmediana &lt;- median(datos_pinguinos$flipper_lenght)\nmediana\n\n[1] 197\n\n# Gráfico de histograma con colores en los bins para identificar \ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(color =\"#ffffff\", \n                 fill = \"#EF3C49\", \n                 bins=30)+\n  geom_vline(xintercept = mediana, size = 1) +\n  geom_vline(xintercept = media, size = 1, linetype = \"dashed\", color=\"blue\") \n\n\n\n# Asimétrica, tiene sesgo a la Derecha (cola a la derecha)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#histograma-y-densidad",
    "href": "tema-ggplot-histograma.html#histograma-y-densidad",
    "title": "3  Librería ggplot",
    "section": "4.8 Histograma y densidad",
    "text": "4.8 Histograma y densidad\nPodemos añadir un gráfico de densidad (poligono) junto al gráfico de histograma utilizando la función geom_density() en una nueva capa y la estética en el histograma aes(y = ..density..), recordando que para añadir esta nueva geometria, hay que colocar el signo de + al final del cierre del paréntesis de geom_histogram .\n\n# Gráfico de histograma con grafico de densidad\n# lwd=1.5 , representa el grosor del borde del\n# grafico de densidad\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(y = ..density..), \n                 color =\"#ffffff\", \n                 fill = \"#EF3C49\", \n                 bins=30)+\n  geom_density(lwd=1.5, colour = \"blue\")"
  },
  {
    "objectID": "tema-ggplot-histograma.html#histograma-con-variable-categórica",
    "href": "tema-ggplot-histograma.html#histograma-con-variable-categórica",
    "title": "3  Librería ggplot",
    "section": "4.9 Histograma con variable categórica",
    "text": "4.9 Histograma con variable categórica\nEs posible utilizar una variable categórica en un histograma, en este caso la variable sex que contiene los valores del sexo de los pinguinos. Esta variable representa una estetica del gráfico, por lo tanto debe incluirse dentro de la propiedad aes() de la geometria geom_histogram() y la utilizaremos para modificar el color de relleno del histograma.  Como la variable sex tiene dos categorias, ggplot genera dos histogramas de diferentes colores, uno por cada categoría.\n\n# Gráfico de histograma con dos variables\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30)\n\n\n\n# colores personalizados\n# paleta personalizada\ncolores &lt;- c(\"#1B9E77\", \"#D95F02\")\n\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30)+\n  scale_fill_manual(values = colores)\n\n\n\n\n\n4.9.1 Añadir datos al histograma\nLos códigos para colocar datos al histograma por categoría, es el mismo visto en los ejemplos anteriores donde se muestra texto en el gráfico de histograma..\n\n# Gráfico de histograma dos variables\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30)+\n  stat_bin(aes(label=..count..), \n           vjust=-0.1, \n           hjust= 0.5,  \n           geom=\"text\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n4.9.2 Histograma con transparencia\nPodemos utilizar la propiedad alpha (transparencia) en le geometria geom_histograma() con valores de (0 a 1), 1 = 100%.  Para que usar la transparencia.  Cuando creamos este tipo de histogramas la naturaleza de ggplot, es crear los histograma una encima del otro, como si fueran un solo histograma pero separando la distribución de los datos según la variable sex, esto no permite comprar realmente la distribución de los datos de ambos histogramas.\n\n# Gráfico de histograma con dos variables\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30,\n                 alpha=0.5)\n\n\n\n\n\n\n4.9.3 Histograma con transparencia (position)\nSi utilizamso la propiedad position = “identity” , en la geometria geom_histogram() podemos ver que ahora los histogramas se solapan, ya que uno esta detrás del otro, permitiendo comparar la distribución de los datos.\n\n# Gráfico de histograma con dos variables\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30,\n                 alpha=0.5, \n                 position =\"identity\")"
  },
  {
    "objectID": "tema-ggplot-histograma.html#facetas",
    "href": "tema-ggplot-histograma.html#facetas",
    "title": "3  Librería ggplot",
    "section": "4.10 Facetas",
    "text": "4.10 Facetas\nLas facetas son una forma más ordenada de mostrar los gráficos que muestran varias categorias, para ello debemos utilizar la función facet_grid() con el nombre de la variable. Los simbolos .~ antes de la variable sex le indica a la faceta que debe colocar los gráficos categorizados en columnas, es decir uno al lado del otro.\n\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30, \n                 position =\"identity\")+\n  facet_grid(.~sex)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#recomendaciones-viz",
    "href": "tema-ggplot-histograma.html#recomendaciones-viz",
    "title": "3  Librería ggplot",
    "section": "4.11 Recomendaciones (VIZ)",
    "text": "4.11 Recomendaciones (VIZ)\n\n4.11.1 Recomendación 1\nCuando se utilizan facetas para mostrar distribuciones por grupo, permite comparar las distribuciones por una variable categórica, sin embargo, al separar los datos es importante mirar el eje x donde el rango de distribución del sexo male es mayor, por lo que es recomendable mantener los ejes iguales modificando los valores con la función xlim() colocando los rangos de la distribución xlim(170,240).\n\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30, \n                 position =\"identity\")+\n  facet_grid(.~sex)+\n  xlim(170,240)\n\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n4.11.2 Recomendación 2\nOtra opción en el uso de facetas para no modificar el eje x, es usar las facetas en formato de filas.  Para generar las facetas en filas, debemos utilizar los simbolos ~. después de la variable sex le indica a la faceta que debe colocar los gráficos categorizados en filas, uno debajo del otro. Esto permite una mejor comparación de los histogramas con las mismas coordenadas en el eje x.\n\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30, \n                 position =\"identity\")+\n  facet_grid(sex~.)"
  },
  {
    "objectID": "tema-ggplot-histograma.html#titulos-y-nombre-de-ejes",
    "href": "tema-ggplot-histograma.html#titulos-y-nombre-de-ejes",
    "title": "3  Librería ggplot",
    "section": "4.12 Titulos y nombre de ejes",
    "text": "4.12 Titulos y nombre de ejes\nPodemos añadir titulos al gráfico y modificar la etqiueta de los ejes x, y , como el de la leyenda através de la función labs().\n\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30, \n                 position =\"identity\")+\n  facet_grid(sex~.)+\n  labs(title = \"Distribución de las longuitud de la aleta de los pinguinos por sexo\",\n       subtitle = \"Datos de las islas...\",\n       x=\"Lonuitud\",\n       y=\"Cantidad\",\n       fill=\"Sexo\")"
  },
  {
    "objectID": "tema-ggplot-histograma.html#práctica",
    "href": "tema-ggplot-histograma.html#práctica",
    "title": "3  Librería ggplot",
    "section": "4.13 Práctica",
    "text": "4.13 Práctica\nCrear gráfico de histograma utilizando los datos data_penguins_clean.csv que se encuentran en la carpeta data.  Al cargar los datos debe filtralos por la especie de Gentoo. Utilizar facetas basado en la variable sex.\nGráfico de resultado:\n\ndatos_pinguinos &lt;- read.csv(\"data/data_penguins_clean.csv\")\ndatos_pinguinos |&gt; \n  glimpse()\n\nRows: 333\nColumns: 8\n$ X              &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ species        &lt;chr&gt; \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adel…\n$ island         &lt;chr&gt; \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"To…\n$ bill_lenght    &lt;dbl&gt; 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6, 3…\n$ bill_depth     &lt;dbl&gt; 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2, 2…\n$ flipper_lenght &lt;int&gt; 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 185, …\n$ sex            &lt;chr&gt; \"male\", \"female\", \"female\", \"female\", \"male\", \"female\",…\n$ body_mass_g    &lt;int&gt; 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800, 4…\n\ndatos_pinguinos$species &lt;- as.factor(datos_pinguinos$species)\ndatos_pinguinos$island &lt;- as.factor(datos_pinguinos$island)\ndatos_pinguinos$sex &lt;- as.factor(datos_pinguinos$sex)\n\n\ndatos_pinguinos |&gt; \n  filter(species==\"Gentoo\") |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_histogram(aes(fill=sex), \n                 color =\"#ffffff\", \n                 bins=30, \n                 position =\"identity\")+\n  facet_grid(sex~.)+\n  labs(title = \"Distribución de las longuitud de la aleta de los pinguinos por sexo\",\n       subtitle = \"Datos de las islas...\",\n       x=\"Lonuitud\",\n       y=\"Cantidad\",\n       fill=\"Sexo\")+\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "tema-ggplot-histograma.html#valores-atipicos",
    "href": "tema-ggplot-histograma.html#valores-atipicos",
    "title": "3  Librería ggplot",
    "section": "5.1 Valores atipicos",
    "text": "5.1 Valores atipicos\nSon observaciones cuyos valores son muy diferentes a las de otras observaciones del mismo grupo de datos. Los datos atípicos son ocasionados por: errores de procedimiento, acontecimientos extraordinarios, valores extremos, estos valores pueden distorsionar los resultados del análisis de datos.\n\n#demo\nlibrary()\n#Extarer datos de prueba\nvaloresA &lt;-  datos_pinguinos |&gt; \n            slice_sample(n=3)\n# sumarle 150 a los datos\nvaloresA$flipper_lenght &lt;- valoresA$flipper_lenght + 80\n\n# unir datos\ndatos_pinguinos_ &lt;- rbind(datos_pinguinos,valoresA)\n\n#mostrar gráfico\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght)) +\n  geom_boxplot()\n\n\n\nboxplot.stats(datos_pinguinos_$flipper_lenght)\n\n$stats\n[1] 172.0 190.0 197.0 213.5 231.0\n\n$n\n[1] 336\n\n$conf\n[1] 194.9744 199.0256\n\n$out\n[1] 274 265 305\n\n# $stats\n# [1] 172 190 197 213 231\n\n#194.9744 199.0256\n\n(rango &lt;- 231-172)\n\n[1] 59\n\ndatos_pinguinos |&gt; \n  glimpse()\n\nRows: 333\nColumns: 8\n$ X              &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ species        &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie,…\n$ island         &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, …\n$ bill_lenght    &lt;dbl&gt; 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6, 3…\n$ bill_depth     &lt;dbl&gt; 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2, 2…\n$ flipper_lenght &lt;int&gt; 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 185, …\n$ sex            &lt;fct&gt; male, female, female, female, male, female, male, femal…\n$ body_mass_g    &lt;int&gt; 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800, 4…\n\n#desviavion estandar\nsd(datos_pinguinos_$flipper_lenght)\n\n[1] 15.95727\n\ndatos_pinguinos$sex &lt;- as.factor(datos_pinguinos$sex)\n\ndatos_pinguinos |&gt; \n  group_by(sex) |&gt; \n  summarise(media = mean(flipper_lenght), \n            mediana = median(flipper_lenght))\n\n# A tibble: 2 × 3\n  sex    media mediana\n  &lt;fct&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 female  197.    193 \n2 male    205.    200.\n\ndatos_pinguinos |&gt; \n  ggplot(aes(y= sex, x= flipper_lenght)) +\n  geom_boxplot()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#boxplot-vertical",
    "href": "tema-ggplot-histograma.html#boxplot-vertical",
    "title": "3  Librería ggplot",
    "section": "5.2 Boxplot vertical",
    "text": "5.2 Boxplot vertical\nPara girar el gráfico de boxplot en ggplot, solo debemos cambiar la asignación de la varible x= flipper_lenght a y= flipper_lenght en la estética aes().\n\ndatos_pinguinos |&gt; \n  ggplot(aes(y= flipper_lenght)) +\n  geom_boxplot()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#boxplot-con-distribución-de-puntos",
    "href": "tema-ggplot-histograma.html#boxplot-con-distribución-de-puntos",
    "title": "3  Librería ggplot",
    "section": "5.3 Boxplot con distribución de puntos",
    "text": "5.3 Boxplot con distribución de puntos\nPara añadir los puntos de distribución en el gráfico del boxplot debemos hacer dos pasos: 1. Añadir el eje y=0 en el aes() 2. Utrilizar le geometría geom_jitter().\n\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght, y=0)) +\n  geom_boxplot()+\n  geom_jitter()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#boxplot-con-colores",
    "href": "tema-ggplot-histograma.html#boxplot-con-colores",
    "title": "3  Librería ggplot",
    "section": "5.4 Boxplot con colores",
    "text": "5.4 Boxplot con colores\nPara modificar la apariencia del gráfico de boxplot, debemos de modificar las propiedades en la geomatría geom_boxplot().\n\ncolor = color de la línea del boxplot\nfill = color de la caja, si utilizamos , fill=“transparente” la caja es trasnparente.\nsize = grosor de la linea del boxplot.\n\n\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght, y=0)) +\n  geom_boxplot(color = \"red\", \n               fill = \"lightsalmon\", \n               size = 1)+\n  geom_jitter()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#boxplot-con-dos-variables",
    "href": "tema-ggplot-histograma.html#boxplot-con-dos-variables",
    "title": "3  Librería ggplot",
    "section": "5.5 Boxplot con dos variables",
    "text": "5.5 Boxplot con dos variables\nSe queremos utilizar dos variables para comparar su distribución, debemos utilizar una variable categórica, en este caso la variable island en el valor de X o Y, en función de si queremos mostrar el boxplot horizontal o verical.\n\ndatos_pinguinos |&gt; \n  ggplot(aes(y= flipper_lenght, x=island)) +\n  geom_boxplot()+\n  geom_jitter()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#boxplot-con-dos-variables---colores",
    "href": "tema-ggplot-histograma.html#boxplot-con-dos-variables---colores",
    "title": "3  Librería ggplot",
    "section": "5.6 Boxplot con dos variables - colores",
    "text": "5.6 Boxplot con dos variables - colores\nSe queremos darle un color diferente a cada boxplot, colocamos en la geoametría del gráfico la propiedad fill=variable categórica, con ello se creará un color para cada boxplot.\n\ndatos_pinguinos |&gt; \n  ggplot(aes(y= flipper_lenght, x=island)) +\n  geom_boxplot(aes(fill=island))+\n  geom_jitter()"
  },
  {
    "objectID": "tema-ggplot-histograma.html#gráfico-ridge---color",
    "href": "tema-ggplot-histograma.html#gráfico-ridge---color",
    "title": "3  Librería ggplot",
    "section": "6.1 Gráfico Ridge - color",
    "text": "6.1 Gráfico Ridge - color\nPara modificar el color del relleno en los gráficos tipo Ridge utilizamos la porpiedad fill y la variable island que indica el númeor de categorias, estas deben estar integradas en la estética aes() de la geoametría geom_density_ridges.\n\n# dos variable en el color de la lineas\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght,\n         y=island)) +\n   geom_density_ridges(aes(fill=island))\n\nPicking joint bandwidth of 3.23"
  },
  {
    "objectID": "tema-ggplot-histograma.html#gráfico-ridge---color-palette",
    "href": "tema-ggplot-histograma.html#gráfico-ridge---color-palette",
    "title": "3  Librería ggplot",
    "section": "6.2 Gráfico Ridge - color palette",
    "text": "6.2 Gráfico Ridge - color palette\nPodemos modificar el relleno en los gráficos tipo Ridge con colores diferentes a los colores predeterminados utilizando scale_fill_brewer y algún tipo de paleta de colores en ggplot. En otro de los temas veremos el uso de estas paletas de colores.\n\n# colores con paleta de colores 1\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght,\n         y=island)) +\n   geom_density_ridges(aes(fill=island))+\n  scale_fill_brewer(palette = \"Blues\")\n\nPicking joint bandwidth of 3.23\n\n\n\n\n# colores con paleta de colores 2\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght,\n         y=island)) +\n   geom_density_ridges(aes(fill=island))+\n  scale_fill_brewer(palette = \"Pastel2\")\n\nPicking joint bandwidth of 3.23\n\n\n\n\n# colores con paleta de colores 8\ndatos_pinguinos |&gt; \n  ggplot(aes(x= flipper_lenght,\n         y=island,\n         fill=island)) +\n   geom_density_ridges()+\n  scale_fill_brewer(palette = \"Spectral\")\n\nPicking joint bandwidth of 3.23"
  },
  {
    "objectID": "tema-plot-barras.html#cargar-librerias",
    "href": "tema-plot-barras.html#cargar-librerias",
    "title": "4  Gráfico de Barra",
    "section": "4.1 Cargar librerias",
    "text": "4.1 Cargar librerias\nLibrerias necesarias que se deben haber instalado previamente con install.packages(nombre del paquete) o en el panel Package.\n\nlibrary(tidyverse) # incluye ggplot2\nlibrary(readxl) # funciones para importar xlsx\nlibrary(janitor) # funciones de limpieza\nlibrary(patchwork) #combinar gráficos de ggplot\nlibrary(ggExtra)\nlibrary(ggthemes) # nuevas temas para los\nlibrary(plotly) #gráficos interactivos # remotes::install_github(\"plotly/plotly\")\nlibrary(tibble)\nlibrary(skimr) # reseumen numerico\nlibrary(modeest)\nlibrary(ggrepel) # añadir etiquetas a los gráficos\nlibrary(RColorBrewer) #paletas de colores\nlibrary(plotly) #graficos interactivos"
  },
  {
    "objectID": "tema-plot-barras.html#carga-de-datos",
    "href": "tema-plot-barras.html#carga-de-datos",
    "title": "4  Gráfico de Barra",
    "section": "4.2 Carga de datos",
    "text": "4.2 Carga de datos\n\ndatos_pinguinos_clean &lt;- read.csv(\"data/data_penguins_clean.csv\")\ndatos_pinguinos_clean &lt;- as_tibble(datos_pinguinos_clean)\ndatos_pinguinos_clean&lt;- datos_pinguinos_clean[,-1]\nhead(datos_pinguinos_clean,5)\n\n# A tibble: 5 × 7\n  species island    bill_lenght bill_depth flipper_lenght sex    body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;          &lt;int&gt; &lt;chr&gt;        &lt;int&gt;\n1 Adelie  Torgersen        39.1       18.7            181 male          3750\n2 Adelie  Torgersen        39.5       17.4            186 female        3800\n3 Adelie  Torgersen        40.3       18              195 female        3250\n4 Adelie  Torgersen        36.7       19.3            193 female        3450\n5 Adelie  Torgersen        39.3       20.6            190 male          3650\n\n# Transformar variables de tipo caracter a factor\ndatos_pinguinos_clean$species &lt;- as.factor(datos_pinguinos_clean$species)\ndatos_pinguinos_clean$island&lt;- as.factor(datos_pinguinos_clean$island)\ndatos_pinguinos_clean$sex&lt;- as.factor(datos_pinguinos_clean$sex)\n\n# Verificar tipos de datos\ndatos_pinguinos_clean |&gt; \n  glimpse()\n\nRows: 333\nColumns: 7\n$ species        &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie,…\n$ island         &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, …\n$ bill_lenght    &lt;dbl&gt; 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6, 3…\n$ bill_depth     &lt;dbl&gt; 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2, 2…\n$ flipper_lenght &lt;int&gt; 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 185, …\n$ sex            &lt;fct&gt; male, female, female, female, male, female, male, femal…\n$ body_mass_g    &lt;int&gt; 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800, 4…"
  },
  {
    "objectID": "tema-plot-barras.html#gráfico-de-barra-en-r",
    "href": "tema-plot-barras.html#gráfico-de-barra-en-r",
    "title": "4  Gráfico de Barra",
    "section": "4.3 Gráfico de barra en R",
    "text": "4.3 Gráfico de barra en R\nConocido como gráfico de barras o gráfico de columnas, muestra las frecuencias absolutas y relativas en un sistema de coordenadas de dos ejes.Es utilizado para mostrar comparaciones numéricas discretas entre categorías, por lo tanto se utiliza como base una variable categórica. Un eje del gráfico muestra las categorías específicas que se están comparando y el otro eje representa una escala de valores discretos. Hay que mencionar que aunque utilizamos como sinónimo los gráficos de barras y columnas, un gráfico de columna es un gráfico con barras verticales y un gráfico de barras son gráficos en posición horizontal. \nPara crear un gráfico de barra en ggplot utilizamos la geometría geom_bar() donde la variable en la estética aes() debe ser una variable categórica, como en este caso las variables species, island, sex del tibble datos_pinguinos_clean.  Lo que hace ggplot, es agrupar el número de observaciones por cada categoría y el valor calculado corresponde al ancho o alto de la barra.\n\n#Gráfico de barras de numero de observaciones por especies \ndatos_pinguinos_clean |&gt; \n  ggplot(aes(x=species)) +\n  geom_bar()\n\n\n\n#Gráfico de barras de numero de observaciones por isla \ndatos_pinguinos_clean |&gt; \n  ggplot(aes(x=island)) +\n  geom_bar()\n\n\n\n#Gráfico de barras de numero de observaciones por sexo\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(x=sex)) +\n  geom_bar()"
  },
  {
    "objectID": "tema-plot-barras.html#gráfico-de-columnas",
    "href": "tema-plot-barras.html#gráfico-de-columnas",
    "title": "4  Gráfico de Barra",
    "section": "4.4 Gráfico de columnas",
    "text": "4.4 Gráfico de columnas\nGgplot tambien utiliza otra geometría para crear gráficos de columnas, la cual es geom_col(), sin embargo, su funcionamiento es un poco diferente ya que esta utiliza un valor categórico y un valor numérico para crear las columnas el cual debe ser calculado. Este gráfico tambien permite transformar un gráfico de barras o más bien girar el gráfico de columnas.\n\n# Crear datos de conteo de observaciones por categoria\nconteo &lt;- datos_pinguinos_clean |&gt; \n  count(species)\n# Crear gráfico de columnas\nconteo |&gt; \n  ggplot(aes(x=species, y=n)) +\n  geom_col()\n\n\n\n# Girar Gráfico modificando orden las variables X,Y\nconteo |&gt; \n  ggplot(aes(y=species, x=n)) +\n  geom_col() \n\n\n\n\n\n4.4.1 Insertar etiquetas de datos en el gráfico\nPara añadir texto con los datos en cada columna se debe agregar la capa geom_text() y colocar las siguientes propiedades que cuenta el número de observaciones de la tabla geom_text(aes(label = after_stat(count)),stat = “count”).\n\n# Observaciones por especies\n\ndatos_pinguinos_clean |&gt; \n  ggplot(aes(species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)),\n    stat = \"count\"\n  )\n\n\n\n# Modificar posición de los numeros en capa vertical\n# vjust = 0.0 (coloca el text por encima de la barra)\n#  vjust = -1.0 (valores positivos para bajar texto, negativos para subir)\n\n datos_pinguinos_clean |&gt; \n  ggplot(aes(species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0\n  )\n\n\n\n\n\n\n4.4.2 Modificar colores del texto de las barras\nUsando la propiedad colour y el color del gráfico en hexadecimal o por su nombre, dentro de la función geom_text() podemos modificar el color del texto.\n\n# modificar color del texto de etiqueta de datos\n datos_pinguinos_clean |&gt; \n  ggplot(aes(species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )\n\n\n\n\n\n\n4.4.3 Modificar colores de las barras del gráfico\nPara modificar el color de las barras se utiliza la propiedad fill en las propiedad de aes(fill= “#color” / variable) , se puede utilizar un solo color o asignar el color según variable categorica, en este ejemplo, utilizamos la variable species.\n\n# Uno solo color en las barras\n\n datos_pinguinos_clean |&gt; \n  ggplot(aes(species,)) +\n  geom_bar(fill=\"#a62749\")+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )\n\n\n\n#Colores  en las barras según categorias\n# Se crea una leyenda de los colores de la categoria\n datos_pinguinos_clean |&gt; \n  ggplot(aes(species,fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )\n\n\n\n\n\n\n4.4.4 Modificar Posición de la leyenda de categorias\nPara modificar la posición de la leyenda generada por ggplor, se utiliza la capa theme() y la propiedad legend.position, con los valores “none”, “left”, “right”, “top”, “bottom”. En este ejemplo ocultaremos la leyenda ya que el título de la leyenda no aporta nada, porque los colores y el eje x describen la categoría. Para eliminar el título de la leyenda debemos recordar que la leyenda se genera de la propiedad fill, para eliminarla utilizamos labs(fill=““).\n\n#Modificar la posición de la leyenda\n datos_pinguinos_clean |&gt; \n  ggplot(aes(species,fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )+\n  theme(legend.position = \"bottom\")+\n  labs(fill=\"\") \n\n\n\n\n\n\n4.4.5 Modificar las coordenadas de los ejes\nEn el gráfico de ejemplo, los valores encima de las barras se cortan debido a que las etiquetas de los datos están por encima del valor del eje y. Para modificar las coordenadas X y/o Y en el gráfico se puede utilizar la capa de coordenadas coord_cartesian(ylim=c(0,650)). Se se desea modificar el eje x entonces se utilizaría coord_cartesian(xlim=c(0,100)), pero en este tipo de gráfico no es necesario.\n\n#Se modifica la coordenada \"Y\" con los valores de 0 a 650  en un vector atómico\n datos_pinguinos_clean |&gt; \n  ggplot(aes(species,fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )+\n  theme(legend.position = \"bottom\")+\n  labs(fill=\"\") +\n  coord_cartesian(ylim=c(0,650))\n\n\n\n#Se modifica la coordenada \"Y\" con los valores de 0 a 160  en un vector atómico\n datos_pinguinos_clean |&gt; \n  ggplot(aes(species,fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )+\n  theme(legend.position = \"bottom\")+\n   labs(fill=\"\") +\n  coord_cartesian(ylim=c(0,160))\n\n\n\n\n\n\n4.4.6 Ordenar barras por tamaño\nAlgo común al utilizar el gráfico de barras es ordenar las barras según número de observaciones, para ello debemos utilizar la función fct_infreq()) en la estetica aes() con la variable categórica especies,donde ggplot almacena el conteo por cada categoría.\n\n#Se modifica la coordenada \"Y\" con los valores de 0 a 620  en un vector atómico\n datos_pinguinos_clean |&gt; \n  ggplot(aes(fct_infreq(species),\n             fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )+\n  theme(legend.position = \"bottom\")+\n   labs(fill=\"\") +\n  coord_cartesian(ylim=c(0,160))\n\n\n\n\nInvertir orden de las barras  Para invertir el orden de las barras debemos utilizar la función fct_rev() en la estetica aes() que contiene la variable especies tomando en cuenta la función fct_infreq() que ordena el gráfico. Estas funciones de ordenamiento solo ordenan variables categoricas o de tipo factor.\n\n#Se modifica la coordenada \"Y\" con los valores de 0 a 620  en un vector atómico\n datos_pinguinos_clean |&gt; \n  ggplot(aes(fct_rev(fct_infreq(species)),\n             fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )+\n  theme(legend.position = \"bottom\")+\n  labs(fill=\"\") +\n  coord_cartesian(ylim=c(0,160))\n\n\n\n\n\n\n4.4.7 Modificar nombre de los ejes\nPara modificar el nombre de los ejes debemos utilizar la función lab() e incluir los valores personalizados de x / y, los cuales se colocan dentro de la función de la siguiente forma labs(x=“Especies”, y=“Cantidad”).\n\n#Se modifica la coordenada \"Y\" con los valores de 0 a 620  en un vector atómico\n datos_pinguinos_clean |&gt; \n  ggplot(aes(fct_rev(fct_infreq(species)),\n             fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )+\n  theme(legend.position = \"bottom\")+\n  labs(fill=\"\", \n       x=\"Especies\",\n       y=\"Cantidad\") +\n  coord_cartesian(ylim=c(0,160))"
  },
  {
    "objectID": "tema-plot-barras.html#barras-apiladas",
    "href": "tema-plot-barras.html#barras-apiladas",
    "title": "4  Gráfico de Barra",
    "section": "4.5 Barras apiladas",
    "text": "4.5 Barras apiladas\nEn ggplot podmeos hacer un gráfico utilizando dos variables categóricas en los gráficos de barras agrupando los datos por la estética de color fill= variable categorica de esta forma se creará lo que se conoce como barras apiladas.\n\n# Dos variables categoricas \n# species es la categoria en el eje x\n# sex la categoria que apila las barras\n\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(species, fill=sex)) +\n  geom_bar()\n\n\n\n# Dos variables categoricas \n# sex es la categoria en el eje x\n# speciesla categoria que apila las barras\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(sex, fill=species)) +\n  geom_bar()\n\n\n\n\n\n4.5.1 Etiqueta de datos en barras apiladas\nLas barras apiladas tambien son conocidas como stack bar es por ello que para poder insertar los datos en barras apiladas debemos cambiar su posición predeterminada de los datos utilizando position = position_stack(x,y) en la geoametría de texto eom_text().\n\n#añadir capa geom_text()\n# se insertan las etiquetas de datos , pero , no centralizadas\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(species, fill=sex)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" \n  )\n\n\n\n#para centrarlas se utiliza la propiedad position = position_stack(0.5, 0.0) dentro de goem_tex()\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(species, fill=sex)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\",\n    position = position_stack(0.5, 0.0)\n  )\n\n\n\n\n\n\n4.5.2 Ordenar barras apiladas\nPara ordenar las barras aipladas utilizamos la función de ordenación fct_infreq() en las categoria del eje x y la varible categórica species.\n\n# Ordenar barras apiladas\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(fct_infreq(species), fill=sex)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\",\n    position = position_stack(0.5, 0.0)\n  )\n\n\n\n\n\n\n4.5.3 Barras apiladas - datos relativos\nSi queremos comparar las columnas con proporciones relativas, debemos añadir a la geometría la propiedad geom_bar(position = “fill”), con esto ggplot modificará los valores de la proporción de datos de la variable sex en cada columna island.\n\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(species, fill=sex)) +\n  geom_bar(position = \"fill\")"
  },
  {
    "objectID": "tema-plot-barras.html#barras-no-apiladas",
    "href": "tema-plot-barras.html#barras-no-apiladas",
    "title": "4  Gráfico de Barra",
    "section": "4.6 Barras No apiladas",
    "text": "4.6 Barras No apiladas\nSe queremos utilizar dos variables categóricas en el gráfico de barras, pero que no esten apiladas, sino una al lado de la otra, se debe utilizar en la geometría de la barra la geom_bar(position = “dodge”) para que ggplot pueda reconocer que las barras no serán apiladas.\n\n# grafico de dos variables categoricas agrupadas por color \n# Ordenar barras no apiladas\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(fct_infreq(species), fill=sex)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\n\n4.6.1 Modificar la posición de la etiqueta de datos en barras no apiladas\nAl cambiar la propiedad dodge de barras no apiladas, se debe cambiar tambien la posición de los datos de texto con position = position_dodge(1.0) en la geometria de texto geom_text(). El valor de 1.0 permite colocar los datos encima de cada barra y centrado horizontalmente en cada barra. Para modificar la posición del texto en cada barra debemos ajustarlo con vjust (posicion vertical) y hjust (posicion horizontal).\n\n# Modificar posicion de la leyenda de datos con,  \n# p\n\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(fct_infreq(species), fill=sex)) +\n  geom_bar(position = \"dodge\")+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\",\n    position = position_dodge(1.0),\n    vjust=-0.3, \n    hjust=0.5\n  )\n\n\n\n\n\n\n4.6.2 Girar gráfico completo\nPara girar un gráfico completo utilizamos una nueva capa con la función coord_flip(). Solo giran las barras y las etiquetas. Las etiquetas de datos se le debe modificar su posición con vjust y hjust.\n\n# Girar barras apiladas\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(fct_infreq(species), fill=sex)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\",\n    position = position_stack(0.5, 0.0)\n  )+\n  coord_flip()\n\n\n\n\nGiro de gráfico de barras no apiladas \n\n# Girar barras no apiladas\n# valores no ajustados\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(fct_infreq(species), fill=sex)) +\n  geom_bar(position = \"dodge\")+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\",\n    position = position_dodge(1.0),\n    vjust=-0.3, \n    hjust=0.5\n  )+\n  coord_flip()\n\n\n\n\nGirar barras no apiladas - valores ajustados fuera de la barra \n\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(fct_infreq(species), fill=sex)) +\n  geom_bar(position = \"dodge\")+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\",\n    position = position_dodge(1.0),\n    vjust=0.5, \n    hjust=-0.3\n  )+\n  coord_flip()\n\n\n\n\nGirar barras no apiladas - valores ajustados dentro de la barra \n\n# Girar barras no apiladas\n# valores ajustados dentro de la barra\ndatos_pinguinos_clean |&gt;\n  ggplot(aes(fct_infreq(species), fill=sex)) +\n  geom_bar(position = \"dodge\")+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\",\n    position = position_dodge(1.0),\n    vjust=0.5, \n    hjust= 2.0\n  )+\n  coord_flip()"
  },
  {
    "objectID": "tema-plot-barras.html#recomendaciones",
    "href": "tema-plot-barras.html#recomendaciones",
    "title": "4  Gráfico de Barra",
    "section": "4.7 Recomendaciones",
    "text": "4.7 Recomendaciones\n\n4.7.1 Recomendación 1\nMuchas Categorias o etiquetas extensa \nLos gráficos de barras son utilizamos con mayor frecuencia para generar ranking de una categoria o cuando el número de categorías es muy extenso. Para transformar las columnas a barras en ggplot es necesario girar todo el gráfico utilizando coord_flip() o modificando el eje de la variable de X a Y.\n\n# Cargar datos\ninec &lt;- read.csv(\"data/INEC-morbilidad-2023-10-14.csv\")\ninec &lt;- as_tibble(inec)\n\n#Gráfico de columnas con un número considerables de categorias\n# No se logra leer bien las etiquetas\ninec |&gt;\n  ggplot(aes(Region)) +\n  geom_bar()\n\n\n\n#Gráfico de columnas transformado en barras, girando el gráfico\n# en este caso se logra leer bien las etiquetas\ninec |&gt;\n  ggplot(aes(Region)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n# Modificando el eje de la variable Region\n# el valor predeterminado es X, lo cambiamos por Y\ninec |&gt;\n  ggplot(aes(y=Region)) +\n  geom_bar() \n\n\n\n\n\n\n4.7.2 Recomendación 2\nOrdenar barras o columnas  Cuando creamos un gráfico de barras o columnas estás por naturaleza se ordenan según la categoría, principalmente en orden alfabético, sin embargo podemos modificar el orden de los datos según el conteo de los datos por categoría. Para ello podemos utiliza en la estética aes() la función fct_infreq(variable categorica) para ordenar los datos, estos se ordenarán de menor a mayor. Si deseamos invertir el orden, debemos utilizar la función fct_rev() que invierte el orden de las categorias, por lo que es importante utilizarlas combinadas fct_rev(fct_infreq(Region)).\nOrdenar gráfico de barra de menor a mayor \n\ninec |&gt;\n  ggplot(aes(fct_infreq(Region))) +\n  geom_bar() +\n  coord_flip()+\n  labs(x=\"provincias\")\n\n\n\n\nOrdenar gráfico de barra de mayor a menor \nAñadir la función fct_rev() al ordenamiento de l avariable Region.\n\ninec |&gt;\n  ggplot(aes(fct_rev(fct_infreq(Region)))) +\n  geom_bar() +\n  coord_flip()+\n  labs(x=\"provincias\")\n\n\n\n\n\n\n4.7.3 Recomendación 3\nQué aporta el color?  Una características muy utilizada en los gráficos de barras o columnas, es colorear las barras cada una con diferentes colores, sin embargo, el color en la barra es una forma de categorizar los datos en el gráfico, por lo que si este no es el fin del color al utilizarlo, mejor utilizar un solo color en todas las barras, ya que probablemente sean todos de una misma categoria y lo que se resalta es el orden según la cantidad de observaciones de todas las categorías.\n\n# varios colores en las barras\ninec |&gt;\n  ggplot(aes(fct_rev(fct_infreq(Region)))) +\n  geom_bar(aes(fill=Region)) +\n  coord_flip()+\n  labs(x=\"provincias\")\n\n\n\n# un solo color en las barras\ninec |&gt;\n  ggplot(aes(fct_rev(fct_infreq(Region)))) +\n  geom_bar(aes(fill=\"salmon\")) +\n  coord_flip()+\n  labs(x=\"provincias\")+\n  guides(fill=\"none\") # eliminar leyenda\n\n\n\n\n\n\n4.7.4 Recomendación 4\nMenos es más Eliminar elementos que no aportan al gráfico como las leyendas de color, grillas y añadir valores, hacen del gráfico más simple pero con la información necesaria. Es por ello que es importante evaluar los elementos del gráfico que aportar a la visualización.\n\n# un solo color en las barras\ninec |&gt;\n  ggplot(aes(fct_rev(fct_infreq(Region)))) +\n  geom_bar(aes(fill=\"salmon\")) +\n  coord_flip()+\n  labs(x=\"provincias\",\n       y=\"cantidad\")+\n  guides(fill=\"none\")+  # eliminar leyenda\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\",\n    vjust=0.5, \n    hjust= 1.2,\n    size=2.9\n  )+\n  theme_classic()\n\n\n\n\n\n\n4.7.5 Recomendación 5\nÉnfasis en una barra  Podemos ordenar el gráfico de barras según el número de observaciones, pero también podemos hacer énfasis en una categoría en particular la cual podemos resaltar o hacer énfasis por medio del color.\n\n#El número de colores esta asociado al núemero de categorias\n# En el caso de Región son 9 categorias\ncolores &lt;- c(\"#636363\",\"#636363\", \"#636363\", \"#636363\" ,\"#636363\" ,\"#636363\" ,\"#636363\",\"#636363\", \"#636363\")\ncolores[1] &lt;- \"#F26419\"\n\n# un solo color en las barras\n\ndata &lt;- inec |&gt; \n  count(Region) |&gt; \n  arrange(desc(n))\n\ndata |&gt;\n  filter(n&gt;1540) |&gt; \n  ggplot(aes(x=Region, y=n)) +\n  geom_col(fill=colores, color=\"#D9D9D9\") +\n  coord_flip()+\n  labs(x=\"provincias\",\n       y=\"cantidad\")+\n  guides(fill=\"none\")+  # eliminar leyenda\n  theme_classic()\n\n\n\n\n\n\n4.7.6 Reodernar barras - OP2\nOtra forma de reordenar el gráfico de barras, es reordenar la variable categórica, esto se hace basado en que una variable categorica es de tipo factor en R, la cual contiene niveles levels de las diversas categoría y son los datos que utiliza ggplot para ordenar el gráfico con esa variable. \nGráfico de barra ordenado según Región (orden A-Z) Si creamos el gráfico, este ordena las barras en orden alfabetico de las categorias.\n\n#Variable Región como factor\ninec$Region &lt;- as.factor(inec$Region)\n\n#Niveles de los datos Region\nlevels(inec$Region)\n\n [1] \"BOCAS DEL TORO\" \"C. NGOBE BUGLE\" \"CHIRIQUI\"       \"COCLE\"         \n [5] \"COLON\"          \"COM. KUNA YALA\" \"COM. NGOBE BUG\" \"DARIEN\"        \n [9] \"HERRERA\"        \"KUNA YALA\"      \"LOS SANTOS\"     \"PANAMA ESTE\"   \n[13] \"PANAMA METRO\"   \"PANAMA NORTE\"   \"PANAMA OESTE\"   \"SAN MIGUELITO\" \n[17] \"VERAGUAS\"      \n\n# un solo color en las barras\ndata &lt;- inec |&gt; \n  count(Region) |&gt; \n  arrange(desc(n))\n\n\n# Crear gráfico 1\ndata |&gt;\n  ggplot(aes(x=Region, y=n)) +\n  geom_col(fill=\"salmon\") +\n  coord_flip()+\n  labs(x=\"provincias\",\n       y=\"cantidad\")+\n  guides(fill=\"none\")+  # eliminar leyenda\n  theme_classic()\n\n\n\n\nGráfico de barra ordenado según levels() de la variable Region  Si mostramos los datos del tibble data vemos que la variable Region no esta ordenada en orden alfabético sino por el valor de n, pero debemos inidcarle a esta variable tipo factor, que los valores levels de esa categoria deben tener el mismo orden del tibble data. Los datos del orden de la variable REgion la almacenaremos en un vector llamado ordenREgion.\n\n# Imprimir tibble data \n# datos ordenados por el valor de n\ndata |&gt; \n  head(5)\n\n# A tibble: 5 × 2\n  Region            n\n  &lt;fct&gt;         &lt;int&gt;\n1 PANAMA METRO   2090\n2 COCLE          2024\n3 CHIRIQUI       1914\n4 VERAGUAS       1848\n5 SAN MIGUELITO  1804\n\n# Capturar datos del orden de la variable Region\n# Region ordenado por valor de \"n\"\nordenRegion &lt;- data$Region\n\n# Ordenar niveles de variable categorica\ndata$Region&lt;- factor(data$Region, \n                     levels = ordenRegion)\n\n#Niveles ordenados según tibble\nlevels(data$Region)\n\n [1] \"PANAMA METRO\"   \"COCLE\"          \"CHIRIQUI\"       \"VERAGUAS\"      \n [5] \"SAN MIGUELITO\"  \"PANAMA OESTE\"   \"HERRERA\"        \"LOS SANTOS\"    \n [9] \"COLON\"          \"BOCAS DEL TORO\" \"PANAMA ESTE\"    \"DARIEN\"        \n[13] \"C. NGOBE BUGLE\" \"KUNA YALA\"      \"PANAMA NORTE\"   \"COM. NGOBE BUG\"\n[17] \"COM. KUNA YALA\"\n\n# Crear gráfico 2\ndata |&gt;\n  ggplot(aes(x=Region, y=n)) +\n  geom_col(fill=\"salmon\") +\n  coord_flip()+\n  labs(x=\"provincias\",\n       y=\"cantidad\")+\n  guides(fill=\"none\")+  # eliminar leyenda\n  theme_classic()\n\n\n\n\nGráfico de barra en ordenado INVERTIDO según levels() de la variable Region  Para invertir el orden de los levels() de la variable región según orden del tibble data, debemos invertir los datos del vector ordenRegion utilizando la función rev().\n\n# Capturar datos del orden de la variable Region\n# Invertir orden de vector Región, de menor a mayor\nordenRegion &lt;- rev(data$Region)\n# Ordenar niveles de variable categorica\ndata$Region&lt;- factor(data$Region, \n                     levels = ordenRegion)\n\n#Niveles ordenados a la inversa\nlevels(data$Region)\n\n [1] \"COM. KUNA YALA\" \"COM. NGOBE BUG\" \"PANAMA NORTE\"   \"KUNA YALA\"     \n [5] \"C. NGOBE BUGLE\" \"DARIEN\"         \"PANAMA ESTE\"    \"BOCAS DEL TORO\"\n [9] \"COLON\"          \"LOS SANTOS\"     \"HERRERA\"        \"PANAMA OESTE\"  \n[13] \"SAN MIGUELITO\"  \"VERAGUAS\"       \"CHIRIQUI\"       \"COCLE\"         \n[17] \"PANAMA METRO\"  \n\n# Crear gráfico 3\ndata |&gt;\n  ggplot(aes(x=Region, y=n)) +\n  geom_col(fill=\"salmon\") +\n  coord_flip()+\n  labs(x=\"provincias\",\n       y=\"cantidad\")+\n  guides(fill=\"none\")+  # eliminar leyenda\n  theme_classic()"
  },
  {
    "objectID": "tema-plot-barras.html#facetas",
    "href": "tema-plot-barras.html#facetas",
    "title": "4  Gráfico de Barra",
    "section": "4.8 Facetas",
    "text": "4.8 Facetas\n\n4.8.1 Facetas de gráficos por columnas\nSi queremos utilizar dos variables categóricas en el gráfico, sin utilizar barras apiladas o agrupadas podemos hacer uso de las facetas. Las facetas es una forma de crear gráficos del mismo tipo separados por una variable categórica, utilizando una nueva capa en ggplot llamada facet_grid(variable), donde en este caso separaremso los gráficos e barras de species  por la variable sex en la faceta. El formato de la faceta facet_grid(.~sex) indica al ggplot que los gráficos generados por la variable sex se muestren por columnas, esde decir , un gráfico al lado del otro.\n\n datos_pinguinos_clean |&gt; \n  ggplot(aes(fct_rev(fct_infreq(species)),\n             fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )+\n  theme(legend.position = \"bottom\")+\n  labs(fill=\"\", \n       x=\"Especies\",\n       y=\"Cantidad\") +\n  # coord_cartesian(ylim=c(0,160))+\n  facet_grid(.~sex)\n\n\n\n\n\n\n4.8.2 Faceta de gráficos por filas\nEl formato de la faceta facet_grid(island~.) indica al ggplot que los gráficos generados por la variable island se muestren por filas, es decir , un gráfico debajo del otro.\n\n# Facetas de gráficos por filas\n datos_pinguinos_clean |&gt; \n  ggplot(aes(fct_rev(fct_infreq(species)),\n             fill=species)) +\n  geom_bar()+\n  geom_text(\n    aes(label = after_stat(count)\n        ),\n    stat = \"count\" ,  \n    vjust = -1.0,\n    colour=\"#a62749\"\n  )+\n  theme(legend.position = \"bottom\")+\n  labs(fill=\"\", \n       x=\"Especies\",\n       y=\"Cantidad\") +\n  facet_grid(island~.)"
  },
  {
    "objectID": "tema-plot-barras.html#práctica",
    "href": "tema-plot-barras.html#práctica",
    "title": "4  Gráfico de Barra",
    "section": "4.9 Práctica",
    "text": "4.9 Práctica\nCrear gráfico de barras apiladas utilizando los datos de data_penguins_clean.csv. Seguir los pasos de** Crear gráfico de Pastel en R de este documento.  TIPS: En el gráfico debe hacer usos de la variables sex y especies con filter(condicion) donde body_mass_g &gt;3200.\nGráfico de resultado:"
  },
  {
    "objectID": "tema-plot-pie.html#cargar-librerias",
    "href": "tema-plot-pie.html#cargar-librerias",
    "title": "5  Gráficos de Pastel",
    "section": "5.1 Cargar librerias",
    "text": "5.1 Cargar librerias\nLibrerias necesarias que se deben haber instalado previamente con install.packages(nombre del paquete) o el panel Package.\n\nlibrary(tidyverse) # incluye ggplot2\nlibrary(readxl) # funciones para importar xlsx\nlibrary(janitor) # funciones de limpieza\nlibrary(patchwork) #combinar gráficos de ggplot\nlibrary(ggExtra)\nlibrary(ggthemes) # nuevas temas para los \nlibrary(plotly) #gráficos interactivos # remotes::install_github(\"plotly/plotly\")\nlibrary(tibble)\nlibrary(skimr) # reseumen numerico\nlibrary(modeest)\nlibrary(ggrepel) # añadir etiquetas a los gráficos\nlibrary(RColorBrewer) #paletas de colores\nlibrary(plotly) #graficos interactivos"
  },
  {
    "objectID": "tema-plot-pie.html#carga-de-datos",
    "href": "tema-plot-pie.html#carga-de-datos",
    "title": "5  Gráficos de Pastel",
    "section": "5.2 Carga de datos",
    "text": "5.2 Carga de datos\nSe utilizará los datos de estudio de lectura y matematica de las escuelas de Miami en 2012 y 2013 por grado y Distrito llamado SchoolsMiamiDade.\nSignificado de las variables: \nSchoolName : Nombre de la Escuela BoardDistrict : Núemero de Dsitrito donde esta la escuela SchoolGrade : Grado al que se le aplico la prueba Reading2012 : puntaje de 1 a 100 en Lectura 2012 Reading2013: puntaje de 1 a 100 en Lectura 2013 ReadingDifference: diferencia entre 2013 y 2012 en lectura Math2012: puntaje de 1 a 100 en Matemática 2012  Math2013: puntaje de 1 a 100 en Matemática 2013  MathDifference: diferencia entre 2013 y 2012 en matemática \n\nSchoolsMiamiDade&lt;- read.csv(\"data/SchoolsMiamiDade.csv\")\nSchoolsMiamiDade &lt;- as_tibble(SchoolsMiamiDade)\nhead(SchoolsMiamiDade,5)\n\n# A tibble: 5 × 9\n  SchoolName BoardDistrict SchoolGrade Reading2012 Reading2013 ReadingDifference\n  &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;             &lt;int&gt;       &lt;int&gt;             &lt;int&gt;\n1 0041 AIR … (9)           A                    82          80                -2\n2 0070 CORA… (9)           A                    71          73                 2\n3 0071 EUGE… (5)           A                    69          69                 0\n4 0072 SUMM… (9)           B                    57          50                -7\n5 0073 MAND… (9)           C                    34          32                -2\n# ℹ 3 more variables: Math2012 &lt;int&gt;, Math2013 &lt;int&gt;, MathDifference &lt;int&gt;\n\n# Verificar tipos de datos\nSchoolsMiamiDade |&gt; \n  glimpse()\n\nRows: 460\nColumns: 9\n$ SchoolName        &lt;chr&gt; \"0041 AIR BASE ELEMENTAR\", \"0070 CORAL REEF MONT AC\"…\n$ BoardDistrict     &lt;chr&gt; \"(9)\", \"(9)\", \"(5)\", \"(9)\", \"(9)\", \"(2)\", \"(4)\", \"(3…\n$ SchoolGrade       &lt;chr&gt; \"A\", \"A\", \"A\", \"B\", \"C\", \"F\", \"A\", \"A\", \"A\", \"C\", \"D…\n$ Reading2012       &lt;int&gt; 82, 71, 69, 57, 34, 28, 68, 73, 68, 39, 38, 45, 53, …\n$ Reading2013       &lt;int&gt; 80, 73, 69, 50, 32, 29, 70, 72, 68, 32, 41, 35, 51, …\n$ ReadingDifference &lt;int&gt; -2, 2, 0, -7, -2, 1, 2, -1, 0, -7, 3, -10, -2, -1, -…\n$ Math2012          &lt;int&gt; 71, 64, 66, 50, 38, 26, 68, 78, 73, 41, 43, 59, 56, …\n$ Math2013          &lt;int&gt; 75, 56, 64, 54, 39, 47, 66, 77, 76, 39, 47, 50, 55, …\n$ MathDifference    &lt;int&gt; 4, -8, -2, 4, 1, 21, -2, -1, 3, -2, 4, -9, -1, -3, -…"
  },
  {
    "objectID": "tema-plot-pie.html#gráficos-de-pastel-en-r",
    "href": "tema-plot-pie.html#gráficos-de-pastel-en-r",
    "title": "5  Gráficos de Pastel",
    "section": "5.3 Gráficos de Pastel en R",
    "text": "5.3 Gráficos de Pastel en R\n Los gráficos de pastel, pie o circulares ayudan a mostrar proporciones y porcentajes entre categorías al dividir un círculo en segmentos proporcionales. Cada longitud de arco representa una proporción de cada categoría, mientras que el círculo completo representa el 100%.\nEste tipo de gráficos son ideales para dar al lector una idea rápida de la distribución proporcional de los datos. Sin embargo tiene varias desventajas: \n\nNo pueden mostrar muchos valores, porque a medida que aumenta el número de valores, el tamaño de cada segmento es más pequeño y dificil de interpretar. \nOcupan más espacio que sus alternativas y la interpretación del gráfico no siempre es fácil de realizar, como el gráfico de barra.\nNo son buenos para realizar comparaciones entre grupos de gráficos circulares.\n\nEl uso del Gráfico de Pastel puede ser un problema ya que las personas se les dificulta leer ángulos, por lo que al cerebro le cuesta interpretar el gráfico de forma rápida. El comentario no está relacionado ha no utilizarlo, sino a la idea de evaluar la necesidad de utilizarlo y tomar en cuenta recomendaciones de cuando utilizarlo."
  },
  {
    "objectID": "tema-plot-pie.html#crear-gráfico-de-pastel-en-r",
    "href": "tema-plot-pie.html#crear-gráfico-de-pastel-en-r",
    "title": "5  Gráficos de Pastel",
    "section": "5.4 Crear gráfico de Pastel en R",
    "text": "5.4 Crear gráfico de Pastel en R\nEn ggplot no hay una geometría para realizar un gráfico de pastel, sin embargo, aunque el proceso de su creación resulte un poco tedioso, es una forma de entender de donde se deriva el gráfico de barra y su posible sustituto en algunos casos  Los pasos para hacer un gráfico de pastel son los siguientes:\n\n5.4.1 Crear una tabla de datos ordenados\n\ntb_distritos&lt;- SchoolsMiamiDade |&gt; \n              count(BoardDistrict) |&gt; \n              arrange(desc(n)) \n\ntb_distritos_&lt;- SchoolsMiamiDade |&gt; \n             group_by(BoardDistrict, SchoolGrade) |&gt; \n            summarise(n = n())\n\n`summarise()` has grouped output by 'BoardDistrict'. You can override using the\n`.groups` argument.\n\n# Verificar tipos de datos\ntb_distritos |&gt; \n  glimpse()\n\nRows: 11\nColumns: 2\n$ BoardDistrict &lt;chr&gt; \"(9)\", \"(2)\", \"(1)\", \"(6)\", \"(4)\", \"(8)\", \"(5)\", \"(7)\", …\n$ n             &lt;int&gt; 76, 75, 53, 53, 47, 47, 41, 37, 28, 2, 1\n\n\n\n\n5.4.2 Transformar tabla a tibble (opcional)\nEl conjunto de datos a utilziar en el gráfico tambien puede ser un dataframe,\n\ntb_distritos &lt;- as_tibble(tb_distritos)\ntb_distritos |&gt; \n  glimpse()\n\nRows: 11\nColumns: 2\n$ BoardDistrict &lt;chr&gt; \"(9)\", \"(2)\", \"(1)\", \"(6)\", \"(4)\", \"(8)\", \"(5)\", \"(7)\", …\n$ n             &lt;int&gt; 76, 75, 53, 53, 47, 47, 41, 37, 28, 2, 1\n\n# se generan dos variables una cuantitativa y una cualitativa \n# La varibale cualitativa debe ser categorica tipo factor()\n\ntb_distritos$BoardDistrict &lt;- as.factor(tb_distritos$BoardDistrict)\n\ntb_distritos |&gt; \n  glimpse()\n\nRows: 11\nColumns: 2\n$ BoardDistrict &lt;fct&gt; (9), (2), (1), (6), (4), (8), (5), (7), (3), (), (0)\n$ n             &lt;int&gt; 76, 75, 53, 53, 47, 47, 41, 37, 28, 2, 1\n\n\n\n\n5.4.3 Crear gráfico de barra\nPartimos creando un gráfico de barras con dos variables, x=““ que es la posición en X en el gráfico, pero que se coloca solo para poder generar una sola columna, y = n , muestran los calores cuantitativo del conteo de cada Distrito apilados, el valor de fill = BoardDistrict es una Variable categorica que genera el color de cada pila de la columna.\n\ntb_distritos |&gt; \nggplot(aes(x=\"\", y= n, fill=BoardDistrict)) +\n    geom_col()\n\n\n\n#ejemplo circular - anillo\n# Tamaño del agujero central\nhsize &lt;- 3.5\n# Crear tamaño del agujero del anillo en el tibble\ntb_distritos &lt;- tb_distritos |&gt; \n                mutate(x = hsize)\n\ntb_distritos[c(2,3),] |&gt; \nggplot(aes(x=hsize, y= n, fill=BoardDistrict)) +\n    geom_col() +\n    coord_polar(\"y\", start=0) +\n    xlim(c(0.2, hsize+0.5))\n\n\n\n# otra tabla\ntb_distritos_ |&gt; \nggplot(aes(x=hsize, y= n, fill=BoardDistrict)) +\n    geom_col() +\n    coord_polar(\"y\", start=0) +\n    xlim(c(0.2, hsize+0.5))\n\n\n\n\n\n\n5.4.4 Añadir coordenadas polares al gráfico\nUna vez creado el gráfico de barras, generamos la forma circular utilizando coordenadas polares a través de la función coord_polar(“y”, start=0) , la cual debe inciar con el ángulo 0 y terminará en el ángulo 360..\n\ntb_distritos |&gt; \nggplot(aes(x=\"\", y= n, fill=BoardDistrict)) +\n    geom_col()+\n    coord_polar(\"y\", start=0) \n\n\n\n\n\n\n5.4.5 Añadimos los datos al grafico\nCon la geometria geom_text() añadimos los textos de cada variable n y ajustamos la posición de los datos con vjust().\n\ntb_distritos |&gt; \nggplot(aes(x=\"\", y= n, fill=BoardDistrict)) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label =n),position = position_stack(vjust = 0.5)) \n\n\n\n\n\n\n5.4.6 Eliminamos elementos generados de las coordenadas polares\nCon la función theme_void() eliminamos los componentes visuales generados por las coordenadas polares, que no aportan nada al gráfico.\n\ntb_distritos |&gt; \nggplot(aes(x=\"\", y= n, fill=BoardDistrict)) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label =n),position = position_stack(vjust = 0.5)) +\n    theme_void()\n\n\n\ntb_distritos |&gt; \nggplot(aes(x=\"\", y= n, fill=BoardDistrict)) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label =n),position = position_stack(vjust = 0.5)) +\n    theme_void()"
  },
  {
    "objectID": "tema-plot-pie.html#gráfico-de-pastel-con-porcentaje",
    "href": "tema-plot-pie.html#gráfico-de-pastel-con-porcentaje",
    "title": "5  Gráficos de Pastel",
    "section": "5.5 Gráfico de pastel con porcentaje",
    "text": "5.5 Gráfico de pastel con porcentaje\nPara calcaluar el porcentaje de cada slide del gráfico de pastel se debe conocer el total de valores de la variable n, el cual calcularemos en la variable suma.  Este valor lo utilizaremos para dividir cada valor de la variaqble n y multiplicado por 100. Utilizamos la función round(), para redondear y usamos un solo digito decima. Creamos una nueva variable en el tibble llamado porcentaje la cual añadimos al tibble tb_distritos utilizando la función mutate().\n\n#calcular variable porcentaje\nsuma &lt;- sum(tb_distritos$n)\ntb_distritos &lt;- tb_distritos |&gt; \n                mutate(porcentaje = round((n /suma) * 100,1))\n\n# gráfico de pie\ntb_distritos |&gt; \nggplot(aes(x=\"\", y= n, fill=BoardDistrict)) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n             position = position_stack(vjust = 0.5)) +\n    theme_void()+\n    labs(title = \"Porcentaje de escuelas por distrito\") #opcional"
  },
  {
    "objectID": "tema-plot-pie.html#recomendaciones",
    "href": "tema-plot-pie.html#recomendaciones",
    "title": "5  Gráficos de Pastel",
    "section": "5.6 Recomendaciones",
    "text": "5.6 Recomendaciones\n\n5.6.1 recomendación 0\nEl objetivo de los gráficos es trasmitir información a través de este, no hay que adornar los datos, NO utilice efectos 3D en los gráficos, menos en el gráfico de pie, a las personas le cuestat interpretar ángulos, se hace más complicado añadir interpretar figuras en perspectiva.\n\n\n\n5.6.2 Recomendación 1\nOrden de los slide  Si bien las etiquetas de los datos se solapan, es un tema que veremos posteriormente.  El error común en los gráficos de pastel es que los pedazos del pastel o slide aveces no están en orden. Un gráfico de pastel debiera iniciar con el slide más grande en la posición 12 del reloj, seguido de los slide por orden de tamaño. En este caso aunque inicia en la posición 12 del reloj, es el slide de la posición 2 con el valor 10.2% el que esta de primero, y no debe estar en esa posición. Para order los slide en el gráfico, debemos ordenar la variable categórica Board_district, uitilizando la función reorder() en esa variable, la cual ordenara la variable categorica BoardDistrict por el valor de n, el cual esta ordenado de mayor a menor.\n\ntb_distritos |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict,n))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n             position = position_stack(vjust = 0.5)) +\n    theme_void()+\n    labs(title = \"Porcentaje de escuelas por distrito\") #opcional\n\n\n\n\n\n\n5.6.3 Recomendación 2\nNúmero de slide en el gráfico de pastel  Según expertos en VIZ al utilizar un gráfico de pastel, es recomendable que el número de slide no sea mayor a seis (6). En caso de ser así, se recomienda unir los valores más pequeños en un solo slide llamado otros / others. En este ejemplo el número de slide del pie de escuela por distritos en USA, es de 11, así que trabajaremos en reducir este número a solo 6.  Nota: Esta es solo una RECOMENDACIÓN en la visualización de datos al utilizar gráfico de pie\n\n# Crear nueva fila de valor \"otros\" seleccionando las filas\n# de las 6 a  la 11 para luego sumar los valores de n\n\nn &lt;- sum(tb_distritos$n[6:11])\nsuma &lt;- sum(tb_distritos$n)\nBoardDistrict &lt;- \"otros\"\nx &lt;- round(n/suma *100,1)\n# Creamos un dataframe con los valores calculados\nother_row &lt;- data.frame(BoardDistrict,n,x) \nother_row$BoardDistrict &lt;- as.factor(other_row$BoardDistrict)\n\n# Crear nueva tabla con los seis valores seleccionados \n# de los distritos con más escuelas, inlcuyendo \"otros\"\nother_distritos &lt;- tb_distritos[1:5,]\n# other_distritos |&gt; \n#   glimpse()\n\ntb_distritos_ &lt;- bind_rows(other_distritos, other_row)\n\nGráfico de pastel con slide ordenados \n\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict,n))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n             position = position_stack(vjust = 0.5)) +\n    theme_void()+\n    labs(title = \"Porcentaje de escuelas por distrito\") #opcional\n\n\n\n\nOrdenar slide según variable \nEl gráfico generado de los valores más altos, ahora coloca otros al inicio del gráfico, es debido a que contiene el porcentaje con mayorvalor que es 33.9%, sin embargo, al ser el slide de datos restante es recomendable que este al final del resto de los slide. Existen diferentes formas de ordenarlo, en este lo haremos creando una nueva variable llamada orden que contiene los valores del 1 al 6 (cantidad de slide) en el orden en que queremos aparezcan los slides.\n\n# Crear varible orden con valores del 1 al 6\n tb_distritos_$orden &lt;- 1:6\n\n\n# En lugar de ordenar la función reorden por la variable \"n\"\n# lo haremos con la variable \"orden\"\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict,orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n             position = position_stack(vjust = 0.5)) +\n    theme_void()+\n    labs(title = \"Porcentaje de escuelas por distrito\") #opcional\n\n\n\n\nInvertir orden de slide en según variable \nEl gráfico ha sido ordenado por la variable orden pero a iniciado en las posición de las 12 de la manecilla del reloj, pero, en sentido contario a las manecillas, para modificarlo, debemos decirle a la variable orden que invierta su orden amteponiendo el signo negativo (-) en esa variable -orden. De esa forma obtenemos el orden del gráfico.\n\n# Invertir orden de los valores según la posición negativa \n# de la variable \"orden\"\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5)) +\n    theme_void()+\n    labs(title = \"Porcentaje de escuelas por distrito\")  #opcional\n\n\n\n\n\n\n5.6.4 Recomendación 3\nColores no normalizados \nEste error puede ser un poco relativo (diseñar es un arte, pero hay reglas), al utilizar la variable BoardDistrict en la propiedad fill en la estética de aes() de ggplot, este nos genera diversos colores por cada distrito, estos colores son un estandar de ggplot. El problema surge cuando creamos un gráfico con colores personalizados, sin contemplar que existes paletas de colores definidas.\nA manera de ejemplo, crearemos un vector llamado colores, con diversos colores sin evaluar su combinación, los cuales se cargaran a traves de la función scale_fill_manual(values = colores).\n\ncolores &lt;- c(\"#879541\",\"#681221\",\"#114588\",\"#589785\",\"#996677\",\"#664199\")\n\n\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5), \n                  size= 3.4) +\n    theme_void()+ \n    labs(title = \"Porcentaje de escuelas por distrito\",\n         fill=\"Distritos\") + #opcional\n    scale_fill_manual(values = colores)\n\n\n\n\n\n\n5.6.5 Paleta de colores personalizada\nExisten diferentes tipo de paletas de colores en ggplot:\n\nDiverging: BrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral\nQualitative: Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3\nSequential: Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd\n\nMostrar paletas de colores\n\n\n\n\n\n\n\n\n\nColores divergentes  Utilizamos la paleta palette = “Spectral” en la función scale_fill_brewer.\n\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5), \n                  size= 3.4) +\n    theme_void()+ \n       labs(title = \"Porcentaje de escuelas por distrito\",\n         fill=\"Distritos\") + #opcional\n    scale_fill_brewer(palette = \"Spectral\")\n\n\n\n# display.brewer.all(colorblindFriendly = TRUE)  # paleta de colores\n# ?display.brewer.all(type=\"qual\") # paleta de colores cualitativo\n# brewer.pal(6,\"Dark2\") # paleta y numero de colores\n\nColores sequenciales  Utilizamos la paleta palette = “Blues” en la función scale_fill_brewer.\n\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5), \n                  size= 3.4) +\n    theme_void()+ \n       labs(title = \"Porcentaje de escuelas por distrito\",\n         fill=\"Distritos\") + #opcional\n    scale_fill_brewer(palette = \"Blues\") \n\n\n\n\nColores Cualitativos  Utilizamos la paleta palette = “Dark2” en la función scale_fill_brewer.\n\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(label = paste0(porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5), \n                  size= 3.4) +\n    theme_void()+ \n       labs(title = \"Porcentaje de escuelas por distrito\",\n         fill=\"Distritos\") + #opcional\n    scale_fill_brewer(palette = \"Dark2\") \n\n\n\n\n\n\n5.6.6 Modificar apariencia del gráfico\nAntes de ver otra recomendación en los colores del gráfico, modificaremos algunos elementos al gráfico como, añadir el valor de x=1.6 en goem_text() para colocar los valores del texto fuera del gráfico. Utilizando guides(fill = guide_legend(reverse = TRUE)) podemos modificar el orden de los items de la leyenda.\n\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(x=1.6, \n                  label = paste0(porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5), \n                  size= 3.4) +\n    theme_void()+ \n       labs(title = \"Porcentaje de escuelas por distrito\",\n         fill=\"Distritos\") + #opcional\n   guides(fill = guide_legend(reverse = TRUE))\n\n\n\n\nEliminar leyenda, añadir info a datos\nPodemos añadir el nombre del distrito BoardDistrict en la etiqueta de cada slide. Al crear esta información, la leyenda estaría de más por lo que la eliminaremos utilizando theme(legend.position=“none”).\n\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(x=1.6, \n                  label = paste0(BoardDistrict,\"\\n\",porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5), \n                  size= 3.4) +\n    theme_void()+ \n       labs(title = \"Porcentaje de escuelas por distrito\",\n         fill=\"Distritos\") + #opcional\n   theme(legend.position=\"none\") \n\n\n\n\n\n\n5.6.7 Recomendación 4\nÉnfasis en un slide, resaltar slide con mayor porcentaje \nUna de las recomendaciones al realizar visualizaciones es guiar al lector en el aspecto a resaltar del gráfico, ya sea que queramos resaltar el slide con mayor porcentaje o el slide con menor porcentaje. Para ello podemos hacer uso del color para resaltar el slide de interés.\n\n# Crear paleta de colores secuancial  gris\n# brewer.pal permite capturar lista de colores de Greysorder\ncolores &lt;- brewer.pal(7,\"Greys\")\n# Crear color personalizado a posición de slide énfasis\ncolores[6] &lt;- \"#F26419\"\n\n# Invertir orden de los valores según la posición negativa \n# de la variable \"orden\"\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(x=1.6, \n                  label = paste0(BoardDistrict,\"\\n\",porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5), \n                  size= 3.4) +\n    theme_void()+ \n       labs(title = \"Porcentaje de escuelas por distrito\",\n         fill=\"Distritos\") + #opcional\n    theme(legend.position=\"none\") +\n    scale_fill_manual(values = colores)\n\n\n\n\nÉnfasis en un slide, resaltar slide con menor porcentaje \n\n#\ncolores &lt;- brewer.pal(7,\"Greys\")\ncolores[2] &lt;- \"#F26419\"\n\n# Invertir orden de los valores según la posición negativa \n# de la variable \"orden\"\ntb_distritos_ |&gt; \nggplot(aes(x=\"\", y= n, fill= reorder(BoardDistrict, -orden))) +\n    geom_col()+\n    coord_polar(\"y\", start=0) +\n    geom_text(aes(x=1.6, \n                  label = paste0(BoardDistrict,\"\\n\",porcentaje, \"%\")),\n                  position = position_stack(vjust = 0.5), \n                  size= 3.4) +\n    theme_void()+ \n       labs(title = \"Porcentaje de escuelas por distrito\",\n         fill=\"Distritos\") + #opcional\n    theme(legend.position=\"none\") +\n    scale_fill_manual(values = colores)"
  },
  {
    "objectID": "tema-plot-dispersion.html#cargar-librerias",
    "href": "tema-plot-dispersion.html#cargar-librerias",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.1 Cargar librerias",
    "text": "6.1 Cargar librerias\nLibrerias necesarias que se deben haber instalado previamente con install.packages(nombre del paquete) o wn el panel Package.\n\nlibrary(tidyverse) # incluye ggplot2\nlibrary(readxl) # funciones para importar xlsx\nlibrary(janitor) # funciones de limpieza\nlibrary(patchwork) #combinar gráficos de ggplot\nlibrary(ggExtra)\nlibrary(ggthemes) # nuevas temas para los \nlibrary(plotly) #gráficos interactivos # remotes::install_github(\"plotly/plotly\")\nlibrary(tibble)\nlibrary(skimr) # reseumen numerico\nlibrary(modeest)\nlibrary(ggrepel) # añadir etiquetas a los gráficos\nlibrary(RColorBrewer) #paletas de colores\nlibrary(plotly) #graficos interactivos\nlibrary(corrplot)"
  },
  {
    "objectID": "tema-plot-dispersion.html#carga-de-datos",
    "href": "tema-plot-dispersion.html#carga-de-datos",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.2 Carga de datos",
    "text": "6.2 Carga de datos\nSe utilizará los datos de estudio de lectura y matemática de las escuelas de Miami en 2012 y 2013 por grado y Distrito llamado SchoolsMiamiDade.\nSignificado de las variables del dataframe SchoolsMiamiDade  Escuelas de Miami con notas promedio en las materias de lectura y matemática en los años 2012 y 2013.\nSchoolName : Nombre de la Escuela BoardDistrict : Número de Distrito donde esta la escuela SchoolGrade : Grado al que se le aplicó la prueba Reading2012 : puntaje de 1 a 100 en Lectura 2012 Reading2013: puntaje de 1 a 100 en Lectura 2013 ReadingDifference: diferencia entre 2013 y 2012 en lectura Math2012: puntaje de 1 a 100 en Matemática 2012  Math2013: puntaje de 1 a 100 en Matemática 2013  MathDifference: diferencia entre 2013 y 2012 en matemática\n\nSchoolsMiamiDade&lt;- read.csv(\"data/SchoolsMiamiDade.csv\")\nSchoolsMiamiDade &lt;- as_tibble(SchoolsMiamiDade)\nhead(SchoolsMiamiDade,5)\n\n# A tibble: 5 × 9\n  SchoolName BoardDistrict SchoolGrade Reading2012 Reading2013 ReadingDifference\n  &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;             &lt;int&gt;       &lt;int&gt;             &lt;int&gt;\n1 0041 AIR … (9)           A                    82          80                -2\n2 0070 CORA… (9)           A                    71          73                 2\n3 0071 EUGE… (5)           A                    69          69                 0\n4 0072 SUMM… (9)           B                    57          50                -7\n5 0073 MAND… (9)           C                    34          32                -2\n# ℹ 3 more variables: Math2012 &lt;int&gt;, Math2013 &lt;int&gt;, MathDifference &lt;int&gt;\n\n# Verificar tipos de datos\nSchoolsMiamiDade |&gt; \n  glimpse()\n\nRows: 460\nColumns: 9\n$ SchoolName        &lt;chr&gt; \"0041 AIR BASE ELEMENTAR\", \"0070 CORAL REEF MONT AC\"…\n$ BoardDistrict     &lt;chr&gt; \"(9)\", \"(9)\", \"(5)\", \"(9)\", \"(9)\", \"(2)\", \"(4)\", \"(3…\n$ SchoolGrade       &lt;chr&gt; \"A\", \"A\", \"A\", \"B\", \"C\", \"F\", \"A\", \"A\", \"A\", \"C\", \"D…\n$ Reading2012       &lt;int&gt; 82, 71, 69, 57, 34, 28, 68, 73, 68, 39, 38, 45, 53, …\n$ Reading2013       &lt;int&gt; 80, 73, 69, 50, 32, 29, 70, 72, 68, 32, 41, 35, 51, …\n$ ReadingDifference &lt;int&gt; -2, 2, 0, -7, -2, 1, 2, -1, 0, -7, 3, -10, -2, -1, -…\n$ Math2012          &lt;int&gt; 71, 64, 66, 50, 38, 26, 68, 78, 73, 41, 43, 59, 56, …\n$ Math2013          &lt;int&gt; 75, 56, 64, 54, 39, 47, 66, 77, 76, 39, 47, 50, 55, …\n$ MathDifference    &lt;int&gt; 4, -8, -2, 4, 1, 21, -2, -1, 3, -2, 4, -9, -1, -3, -…\n\nSchoolsMiamiDade$BoardDistrict &lt;- as.factor(SchoolsMiamiDade$BoardDistrict)\nSchoolsMiamiDade$SchoolGrade &lt;- as.factor(SchoolsMiamiDade$SchoolGrade)\n\n# ver resumen de datos\nSchoolsMiamiDade |&gt; \n  summary()\n\n  SchoolName        BoardDistrict SchoolGrade  Reading2012      Reading2013   \n Length:460         (9)    : 76    : 55       Min.   :  0.00   Min.   : 0.00  \n Class :character   (2)    : 75   A:204       1st Qu.: 36.00   1st Qu.:37.00  \n Mode  :character   (1)    : 53   B: 85       Median : 51.00   Median :52.50  \n                    (6)    : 53   C: 77       Mean   : 50.98   Mean   :52.08  \n                    (4)    : 47   D: 31       3rd Qu.: 67.00   3rd Qu.:68.00  \n                    (8)    : 47   F:  7       Max.   :100.00   Max.   :97.00  \n                    (Other):109   I:  1       NA's   :17                      \n ReadingDifference    Math2012         Math2013      MathDifference    \n Min.   :-17.000   Min.   :  0.00   Min.   :  0.00   Min.   :-25.0000  \n 1st Qu.: -2.000   1st Qu.: 41.00   1st Qu.: 40.00   1st Qu.: -5.0000  \n Median :  1.000   Median : 53.00   Median : 52.50   Median : -1.0000  \n Mean   :  1.113   Mean   : 53.26   Mean   : 52.29   Mean   : -0.7046  \n 3rd Qu.:  4.000   3rd Qu.: 69.00   3rd Qu.: 67.00   3rd Qu.:  4.0000  \n Max.   : 33.000   Max.   :100.00   Max.   :100.00   Max.   : 25.0000  \n NA's   :17        NA's   :91       NA's   :78       NA's   :91        \n\n# pairs(SchoolsMiamiDade[, c(4:8)])\n# cor(na.omit(SchoolsMiamiDade[, c(4:8)]))"
  },
  {
    "objectID": "tema-plot-dispersion.html#gráficos-de-dispersión-y-puntos-en-r",
    "href": "tema-plot-dispersion.html#gráficos-de-dispersión-y-puntos-en-r",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.3 Gráficos de Dispersión y puntos en R",
    "text": "6.3 Gráficos de Dispersión y puntos en R\n Los gráficos de dispersión (gráfico de puntos, diagrama de XY) utilizan dos variables cuantitativas para generar una colección de puntos usando coordenadas cartesianas para mostrar estos valores. Al mostrar una variable en cada eje, se puede detectar si existe una relación o correlación entre las dos variables."
  },
  {
    "objectID": "tema-plot-dispersion.html#gráfico-de-puntos",
    "href": "tema-plot-dispersion.html#gráfico-de-puntos",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.4 Gráfico de puntos",
    "text": "6.4 Gráfico de puntos\nSe pueden construir gráfico de dispersión con ggplot2 utilizando la geometría geom_point() el cual requiere de 2 variables, por lo regular cuantitativa. Sin embargo, tambien es posible generar este tipo de gráficos con una variable númerica Reading2012 y una variable BoardDistrict tipo categorica. \n\n6.4.1 Una variable cuantitativa y una cualitativa\nEl gráfico muestra la posición de cada escuela según puntaje, por cada distrito Reading2012.\n\n# grafico de punto con una sola variable\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,y=0))+\n  geom_point() \n\nWarning: Removed 17 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n#grafico de puntos con dos variables una cuantitativa y otra cualitativa\n# Materia de lectura 2012 en los diferentes distritos\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,BoardDistrict))+\n  geom_point() \n\nWarning: Removed 17 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n# Materia de lectura 2012 en los diferentes grados\nSchoolsMiamiDade |&gt;\nggplot(aes(Reading2012,SchoolGrade))+\n  geom_point() \n\nWarning: Removed 17 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n6.4.2 Color en los puntos del gráfico\nPara modificar el color de los puntos en el gráfico podemos utilizar la propiedad fill en la geometria de puntos.\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,BoardDistrict))+\n  geom_point(color=\"salmon\") \n\nWarning: Removed 17 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n¿Cuántas escuelas están por encima de de la nota minima de 71 (como ejemplo) en lectura y matemática 2012 \nPara responde esta pregunta utilizaremos la función filter(Reading2012 &gt;= 71) para crear el filtro de las escuelas con puntaje mayor o igual a 71.  El resultado es, lectura = 87, matemática = 74.\n\n# filtro y conteo de datos en lectura 2012\nSchoolsMiamiDade |&gt;\n  filter(Reading2012 &gt;= 71) |&gt; \n  nrow()\n\n[1] 87\n\n# filtro y conteo de datos en matematica 2012\nSchoolsMiamiDade |&gt; \n  filter(Math2012 &gt;= 71) |&gt;\n  nrow()\n\n[1] 74\n\n\nRepresentación de gráfico de dispersión a la pregunta anterior  Para colorear las escuelas según puntaje mayor a 71 podemos utilizar la misma condición del filtro Reading2012 &gt;= 71 usado en el código anterior para buscar los valores, este filtro lo podemos colocar en la propiedad color de la geometria geom_point(aes(color=Reading2012 &gt;= 71)) . De esta forma ggplot hará la separación de colores por nosotros.\n\n# Gráfico con dos variables y colorear con filtro\n# Lectura 2012\nSchoolsMiamiDade |&gt; \nggplot(aes(Reading2012,BoardDistrict))+\n  geom_point(aes(color=Reading2012 &gt;= 71)) \n\nWarning: Removed 17 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nEliminar valor vacios en el gráfico  El gráfico anterior coloca en la leyenda los colores de los valores mayores a 71 como TRUE, los menores a 71 como FALSE, pero tambien coloca el valor de NA que representan los valores nulos. Para eliminar estos valores podemos filtrar los datos previos al uso de ggplot utilizando na.omit(Reading2012) otra opción es utilizar filter(Reading2012 !=““).\n\n# Gráfico - se eliminan datos vacios\nSchoolsMiamiDade |&gt;\n  na.omit(Reading2012) |&gt;\n  ggplot(aes(Reading2012,BoardDistrict))+\n    geom_point(aes(color=Reading2012 &gt;= 71))  \n\n\n\n\nEliminar leyenda  Si deseamos eliminar la leyenda de color (que no aporta nada), podemos colocar al final la capa guides(color = FALSE).\n\n# Gráfico - se elimina leyenda de colores de datos\nSchoolsMiamiDade |&gt;\n  na.omit(Reading2012) |&gt;\n  ggplot(aes(Reading2012,BoardDistrict))+\n    geom_point(aes(color=Reading2012 &gt;= 71))+\n  guides(color = \"none\")"
  },
  {
    "objectID": "tema-plot-dispersion.html#gráfico-de-dispersión",
    "href": "tema-plot-dispersion.html#gráfico-de-dispersión",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.5 Gráfico de dispersión",
    "text": "6.5 Gráfico de dispersión\n\n6.5.1 Dos variables numéricas\nUtilizamos las variables relacionadas con los puntajes de matemática 2012 y lectura 2012, ambos datos cuantitativos. El gráfico se puede interpretar una correlación fuerte positiva (los valores de ambas variables van en aumento).\n\n# Gráfico con dos variables numericas\nSchoolsMiamiDade |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point() \n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nModificar color, forma y tamaño en los puntos \nLas formas shape del los puntos pueden ser valor de 1 a 25.\n\nshape = 0, square\nshape = 1, circle\nshape = 2, triangle point up\nshape = 3, plus\nshape = 4, cross\nshape = 5, diamond\nshape = 6, triangle point down\nshape = 7, square cross\nshape = 8, star\nshape = 9, diamond plus\nshape = 10, circle plus\nshape = 11, triangles up and down\nshape = 12, square plus\nshape = 13, circle cross\nshape = 14, square and triangle down\nshape = 15, filled square\nshape = 16, filled circle\nshape = 17, filled triangle point-up\nshape = 18, filled diamond\nshape = 19, solid circle\nshape = 20, bullet (smaller circle)\nshape = 21, filled circle blue\nshape = 22, filled square blue\nshape = 23, filled diamond blue\nshape = 24, filled triangle point-up blue\nshape = 25, filled triangle point down blue\n\n\n# Gráfico con dos variables numericas y un solo color en los puntos, forma =1\nSchoolsMiamiDade |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\", \n             size=3, \n             shape=1)\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n# Gráfico con dos variables numericas y un solo color en los puntos, forma =5\nSchoolsMiamiDade |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color= \"red\", \n             size=3, \n             shape=5)\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n# Gráfico con dos variables numericas y un solo color en los puntos, forma =15\nSchoolsMiamiDade |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"blue\", \n             size=3, \n             shape=15) \n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n6.5.2 Tres variables en el gráfico\nEn los diagramas de dispersión en ggplot, es posible añadir una tercera variable, en este caso la variable categórica BoardDistrict en la propiedad color de la geometria.  De esta forma es posible identificar las escuelas con mayor puntaje en ambas materia y a que distrito pertenecen,\n\n# Gráfico con dos variables numéricas y colores según los distritos\nSchoolsMiamiDade |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n             color=BoardDistrict), \n             size=3) \n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nModificar el tamaño de los puntos y la transparencia (valores de 0 a 1)  Uno de los inconvenientes comunes en los gráficos de dispersión con muchos puntos, es el solapamiento de estos, por lo que aveces no se puede apreciar de forma correcta el número de puntos, Para ello podemos utilizar la propiedad alpha para la transparencia. Se aumenta el tamaño de los puntos a 4 a manera de ejemplo para mostrar mejor el solapamiento.\n\n# Tamaño de los puntos fijos utilizando size = 4\nSchoolsMiamiDade |&gt;\nggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n            color=BoardDistrict), \n             alpha=0.55, \n             size=4) \n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n6.5.3 Cuatro variables\nPodemos utilizar una cuarta variable en este tipo de gráfico modificando el tamañó de los puntos de forma dinámica, en este caso la variable a utilizar Reading2012 debe ser de tipo numérica. Al realizar esto se generan dos leyendas en el gráfico, uno de color y otra se size.\n\n# Tamaño de los puntos dinámicos utilizando size = Reading2012 \nSchoolsMiamiDade |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n                 color=BoardDistrict, \n                 size=Reading2012), \n                 alpha=0.55)\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n# eliminar leyenda de size\nSchoolsMiamiDade |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n                 color=BoardDistrict, \n                 size=Reading2012), \n                 alpha=0.55)+\n  guides(size=\"none\")+\n  labs(color=\"Distrito\")\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n6.5.4 Cinco variables\nA manera de ejemplo (muchas variables pu7eden sobrecargar el gráfico), es posible incluir una quinta variable (puede generar carga en la visualización) en el gráfico modificando la propiedad shape en el geometria, la variable que modifca este parámetro debe ser categorica, y la diversida de formas shape será en función de la cantidad de categorías de esa variable.\n\n# Tamaño de los puntos dinámicos y la forma del punto según el Distrito\nSchoolsMiamiDade |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n                 color=BoardDistrict, \n                 size=Reading2012, \n                 shape=SchoolGrade),\n                 alpha=0.45)+\n  guides(size=\"none\")+\n  labs(color=\"Distrito\")\n\nWarning: The shape palette can deal with a maximum of 6 discrete values because more\nthan 6 becomes difficult to discriminate\nℹ you have requested 7 values. Consider specifying shapes manually if you need\n  that many have them.\n\n\nWarning: Removed 92 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n6.5.5 Eliminar datos vacíos\nSi bien evaluar si se eliminan o no los datos nulos o vacios es un tema previo a la visualización de datos, es posible filtrar esos datos para que no causen ruido al generar el gráfico, para ello utilizamos la función filter(SchoolGrade!=” “) previo a la función ggplot. Podemos verificar la visualización con los datos de las tablas de frecuencia.\n\n#tabla de frecuencia \n# Una forma de mostrar los datos categóricos\n# y el numero de valores sin categoria\ntable(SchoolsMiamiDade$BoardDistrict)\n\n\n () (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) \n  2   1  53  75  28  47  41  53  37  47  76 \n\ntable(SchoolsMiamiDade$SchoolGrade)\n\n\n      A   B   C   D   F   I \n 55 204  85  77  31   7   1 \n\n# summary(SchoolsMiamiDade)\n\n\nSchoolsMiamiDade |&gt;\n  filter(SchoolGrade!=\" \") |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n                 color=BoardDistrict, \n                 size=Reading2012, \n                 shape=SchoolGrade),\n                 alpha=0.45)+\n  guides(size=\"none\")+\n  labs(color=\"Distrito\")\n\nWarning: Removed 64 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nEliminar Distritos vacios o con minimo de escuelas (opcional)  Eliminar escuelas con valores () y (0) en los distritos que no aportan información al gráfico utilizando filter(BoardDistrict!=“()”). Se verifican los datos con una tabla de frecuencia.\n\n#tabla de frecuencia de distritos\ntable(SchoolsMiamiDade$BoardDistrict)\n\n\n () (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) \n  2   1  53  75  28  47  41  53  37  47  76 \n\n#eliminar datos de distritos con valor ()\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=\"()\")  |&gt;\n  ggplot( aes(Reading2012,Math2012))+\n  geom_point(aes(color=BoardDistrict), \n             alpha=0.55, \n             size=4)+\n  guides(color = guide_legend(\"Distritos\"))\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n#eliminar datos de distritos con valores vacios (), (0)\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot( aes(Reading2012,Math2012))+\n  geom_point(aes(\n             color=BoardDistrict), \n             alpha=0.55, \n             size=4)+\n  guides(color = guide_legend(\"Distritos\"))\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "tema-plot-dispersion.html#énfasis-en-los-gráficos",
    "href": "tema-plot-dispersion.html#énfasis-en-los-gráficos",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.6 Énfasis en los gráficos",
    "text": "6.6 Énfasis en los gráficos\n\n6.6.1 Enfasis colores en puntos\nEn un gráfico de dispersión también podemos hacer énfasis en una categoría en particular,asignando colores de forma manual. En este ejemplo contabilizamso el número de categorías de la variable BoardDistrict que son 11 eliminando las categorias “()”,“(0)”, por lo que serían 9 categorías a utilizar en el gráfico, por lo tanto deberíamos crear nueve colores, uno por cada categoría, almacenados en el vector colores y modificando solo el color de la posición del distrito de interés.\n\n# Calcular Cantidad de categorias\ntable(SchoolsMiamiDade$BoardDistrict) |&gt; \n  length()\n\n[1] 11\n\n#El número de colores esta asociado al número de categorias\n# En el caso de Región son 9 categorias\ncolores &lt;- c(\"#636363\",\"#636363\", \"#636363\", \"#636363\" ,\"#636363\" ,\n             \"#636363\" ,\"#636363\",\"#636363\", \"#636363\")\n\n# Modificar color del distrito en la posición 3\ncolores[3] &lt;- \"#F26419\"\n\n\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n             color=BoardDistrict), \n             alpha=0.5, \n             size=4)+\n  guides(size=\"none\")+\n  labs(color=\"Distrito\")+\n  scale_color_manual(values = colores)\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n6.6.2 Enfasis transparencia en puntos\nOtra forma de hacer énfasis en el gráfico es a través de la transparencia alpha, para ello debemos crear un vector transparenciacon los valores del valor alpha de cada valor de la variable BoardDistrict y utilizando scale_alpha_manual(). Es importante resaltar que la propiedad alfa debe estar en la estética aes() ya que sus datos pertencerán a la variable BoardDistrict.\n\n# Calcular Cantidad de categorias\ntable(SchoolsMiamiDade$BoardDistrict) |&gt; \n  length()\n\n[1] 11\n\n# El número de colores esta asociado al número de categorias\n# En el caso de Región son 9 categorias\ncolores &lt;- c(\"#636363\",\"#636363\", \"#636363\", \"#636363\" ,\"#636363\" ,\n             \"#636363\" ,\"#636363\",\"#636363\", \"#636363\")\ncolores[3] &lt;- \"#F26419\"\n\n# valores de trasnparencia\ntransparencia &lt;- sample(0.2,9, replace = TRUE)\ntransparencia[3] &lt;- 1.0\n\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n             color=BoardDistrict, \n             alpha=BoardDistrict), \n             size=4)+\n  guides(size=\"none\")+\n  labs(color=\"Distrito\")+\n  scale_color_manual(values = colores)+\n  scale_alpha_manual(values = transparencia)\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n6.6.3 Etiquetas en los puntos\nPara mostarr las etiquetas o texto en los puntos del gráfico debemos utilizar la geoametria geom_text() y el valor de la etiqueta a utilizar label=variable.\n\n# El número de colores esta asociado al número de categorias\n# En el caso de Región son 9 categorias\ncolores &lt;- c(\"#636363\",\"#636363\", \"#636363\", \"#636363\" ,\"#636363\" ,\n             \"#636363\" ,\"#636363\",\"#636363\", \"#636363\")\ncolores[3] &lt;- \"#F26419\"\n\n# valores de trasnparencia\ntransparencia &lt;- sample(0.2,9, replace = TRUE)\ntransparencia[3] &lt;- 1.0\n\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n             color=BoardDistrict, \n             alpha=BoardDistrict), \n             size=4)+\n  guides(size=\"none\", \n         alpha =\"none\")+\n  labs(color=\"Distrito\")+\n  scale_color_manual(values = colores)+\n  scale_alpha_manual(values = transparencia) +\n  geom_text(aes(\n          label=SchoolName), \n          size=2.5,\n          hjust=-0.1, \n          vjust=0.1, \n          color=\"#252b2b\"\n           )\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_text()`).\n\n\n\n\n\n\n\n6.6.4 Énfasis en el texto\nPOdemos también hacer énfasis en las etiquetas de texto, colocando solo las etiquetas de los punto que queremos, para ello es necesario crear una variable que contenga esos datos. etiquetas &lt;- (ifelse(SchoolsMiamiDade\\(BoardDistrict==\"(3)\", SchoolsMiamiDade\\)SchoolName,” “))**  SchoolsMiamiDade&lt;- etiquetas  Si el distrito es”(3)” asignar a la etiqueta el nombre de la escuela de la variable SchoolName*** , sino le asigna espacio en blanco a la etiqueta. Almacenamos este vector al tibble SchoolsMiamiDade**.\n\n# El número de colores esta asociado al número de categorias\n# En el caso de Región son 9 categorias\ncolores &lt;- c(\"#636363\",\"#636363\", \"#636363\", \"#636363\" ,\"#636363\" ,\n             \"#636363\" ,\"#636363\",\"#636363\", \"#636363\")\ncolores[3] &lt;- \"#F26419\"\n\n# valores de trasnparencia\ntransparencia &lt;- sample(0.2,9, replace = TRUE)\ntransparencia[3] &lt;- 1.0\n\n#valores de etiqueta\n# SI el distrito es \"(3)\" asignar a la etiqueta el nombre de la escuela\n# sino le asigna espacio en blanco a la etiqueta\netiquetas &lt;- (ifelse(SchoolsMiamiDade$BoardDistrict==\"(3)\", \n                     SchoolsMiamiDade$SchoolName,\" \"))\nSchoolsMiamiDade$label_ &lt;- etiquetas\n\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n             color=BoardDistrict, \n             alpha=BoardDistrict), \n             size=4)+\n  guides(size=\"none\", \n         alpha =\"none\")+\n  labs(color=\"Distrito\")+\n  scale_color_manual(values = colores)+\n  scale_alpha_manual(values = transparencia) +\n  geom_text(aes(\n          label=label_),\n          size=2.5,\n          hjust=-0.1, \n          vjust=0.1, \n          color=\"#252b2b\"\n           )\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_text()`).\n\n\n\n\n\nRecortar texto de la etiqueta que contine los nombres de las escuelas  Para recortar el nombre de las etiquetas, podemos utilizar el siguiente código str_sub(etiquetas,1,4), este selecciona de cada etiqueta la posición 1 al 4 de cada texto y luego se lo asigna a la variable label del dataframe.\n\n# El número de colores esta asociado al número de categorias\n# En el caso de Región son 9 categorias\ncolores &lt;- c(\"#636363\",\"#636363\", \"#636363\", \"#636363\" ,\"#636363\" ,\n             \"#636363\" ,\"#636363\",\"#636363\", \"#636363\")\ncolores[3] &lt;- \"#F26419\"\n\n# valores de trasnparencia\ntransparencia &lt;- sample(0.2,9, replace = TRUE)\ntransparencia[3] &lt;- 1.0\n\n#valores de etiqueta\n# SI el distrito es \"(3)\" asignar a la etiqueta el nombre de la escuela\n# sino le asigna espacio en blanco a la etiqueta\netiquetas &lt;- (ifelse(SchoolsMiamiDade$BoardDistrict==\"(3)\", \n                     SchoolsMiamiDade$SchoolName,\" \"))\n\n# Selecciona solo los primeros cuatros digitos de la etiqueta\n# que contiene los nombres\nSchoolsMiamiDade$label_ &lt;- str_sub(etiquetas,1,4)\n\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n             color=BoardDistrict, \n             alpha=BoardDistrict), \n             size=4)+\n  guides(size=\"none\", \n         alpha =\"none\")+\n  labs(color=\"Distrito\")+\n  scale_color_manual(values = colores)+\n  scale_alpha_manual(values = transparencia) +\n  geom_text(aes(\n          label=label_),\n          size=2.5,\n          hjust=-0.15, \n          vjust=0.1, \n          color=\"#252b2b\"\n           )\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_text()`)."
  },
  {
    "objectID": "tema-plot-dispersion.html#facetas",
    "href": "tema-plot-dispersion.html#facetas",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.7 Facetas",
    "text": "6.7 Facetas\n\n6.7.1 Facetas para clasificar gráficos\nPodemos utilizar facetas para separar los gráficos de dispersión por una variable categórica, através de las propiedades facet_wrap() o facet_grid() , aunque funcionan para lo mismo la forma de dsitribución de los gráficos utilizando estas funciones es diferente.\n\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n                 color=BoardDistrict), \n                 alpha=0.55, \n                 size=4) +\n  labs(title=\"Escuelas  con puntajes de lectura en Matemática y Lectura por Distrito\",\n       subtitle=\"Datos de USA - 2012\") +\n  ylab(\"Notas Matemática\") + \n  xlab(\"Notas Lectura\")+\n  guides(color = guide_legend(\"Distritos\")) +\n  facet_wrap(~BoardDistrict)\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nUso de la función facet_grid() \n\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(aes(\n                 color=BoardDistrict), \n                 alpha=0.55, \n                 size=4) +\n  labs(title=\"Escuelas  con puntajes de lectura en Matemática y Lectura por Distrito\",\n       subtitle=\"Datos de USA - 2012\") +\n  ylab(\"Notas Matemática\") + \n  xlab(\"Notas Lectura\")+\n  guides(color = guide_legend(\"Distritos\")) +\n  facet_grid(BoardDistrict~.)\n\nWarning: Removed 89 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n6.7.2 Evaluación de las variables de lectura en los años 2012 y 2013\nAmbos datos cuantitativos Reading2013,Reading2012.\n\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2013,Reading2012))+\n  geom_point(size=2, aes(color=BoardDistrict), alpha=0.55) +\n  labs(title=\"Escuelas  con puntajes de lectura por Distrito\",\n       subtitle=\"Datos de USA - 2012\") +\n   ylab(\"notas de Lectura 2012\") + xlab(\"Notas de Lectura 2013\")+\n  guides(color = guide_legend(\"Distritos\"))\n\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "tema-plot-dispersion.html#recta-de-regresión-lineal",
    "href": "tema-plot-dispersion.html#recta-de-regresión-lineal",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.8 Recta de regresión lineal",
    "text": "6.8 Recta de regresión lineal\nSe puede crear una recta de regresión lineal a través de la geometría geom_smooth() y sus métodos geom_smooth(method=‘lm’) : - lm modelo lineal - glm - gam - loess ajuste de regresión local suave\n\n#metodol lm\nSchoolsMiamiDade |&gt;\n  filter(BoardDistrict!=c(\"()\",\"(0)\"))  |&gt;\n  ggplot(aes(Reading2012,Reading2013))+\n  geom_point(aes(color=BoardDistrict)) +\n  labs(title=\"Escuelas  con puntajes de lectura por Distrito y diferencia de puntos por año\", subtitle=\"Datos de USA - 2012\") +\n  ylab(\"Puntos Lectura 2013\") + xlab(\"Puntos Lectura 2012\") +\n  geom_smooth(method='lm', se=TRUE) +\n  facet_wrap(BoardDistrict~.)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 15 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 15 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "tema-plot-dispersion.html#práctica",
    "href": "tema-plot-dispersion.html#práctica",
    "title": "6  Gráficos de puntos o dispersión",
    "section": "6.9 Práctica",
    "text": "6.9 Práctica\nCrear gráfico de puntos utilizando los datos INEC-morbilidad-2023-10-14.csv. Es necesario filtrar los datos seleccionando solo: Region=“PANAMA METRO”  Genero=“M”  Edad=“15 a 19 años” o igual a Edad=“20 a 24 años”  Se debe usar como en los colores la variable Causas y hacer énfasis en los colores en la **Causa=Candidiasis de la vulva y de la vagina (n77.1*). El valor de alpha=035 (opcional) y la faceta se debe hacer utilizando la variable edad**.\nGráfico de resultado:\n\ninec &lt;- read.csv(\"data/INEC-morbilidad-2023-10-14.csv\")\ninec &lt;- as_tibble(inec)\n\n# table(inec$Region)\n# # \n# inec |&gt;\n#   glimpse()\n\ninec_4 &lt;- inec  |&gt; \n          filter(Region==\"PANAMA METRO\" &\n                   Genero==\"M\" & \n                   (Edad==\"15  a 19 años\" |  Edad==\"20 a 24 años\"))\n\ninec_4$ano &lt;- as.factor(inec_4$ano)\n\n# El número de colores esta asociado al número de categorias\n# En el caso de Región son 9 categorias\ncolores &lt;- c(\"#636363\",\"#636363\", \"#636363\", \"#636363\" ,\"#636363\" ,\n             \"#636363\" ,\"#636363\",\"#636363\", \"#636363\" , \"#636363\",\n             \"#636363\" ,\"#636363\",\"#636363\", \"#636363\" , \"#636363\")\ncolores[4] &lt;- \"#F26419\" #Candidiasis de la vulva y de la vagina (n77.1*)\n# colores[4] &lt;- \"#F26419\"\n\n\n# table(inec_4$Edad) \n# table(inec_4$Causas)\n\n#grafico\ninec_4 |&gt; \nggplot(aes(ano, Casos))+\n         geom_point(aes(\n             color=Causas,\n             alpha=0.5\n         ),\n         size=3.0)+\n  guides(color=\"none\",\n         alpha=\"none\")+\n  labs(title=\"Causas de Mortalidad en Panamá Metro\",\n       subtitle = \"Candidiasis de la vulva y de la vagina (n77.1*)\")+\n  scale_color_manual(values = colores)+\n  theme_gray()+\n  facet_grid(Edad~.)\n\n\n\n    # theme(legend.position=\"bottom\") +"
  },
  {
    "objectID": "tema-ggplot-lineas.html#crear-gráfico-de-línea-en-r",
    "href": "tema-ggplot-lineas.html#crear-gráfico-de-línea-en-r",
    "title": "7  Gráficos de Línea",
    "section": "7.1 Crear gráfico de línea en R",
    "text": "7.1 Crear gráfico de línea en R\nEl Gráfico de línea se puede realizar utilizando dos variables, relacionada con el intervalo o tiempo y la variable cuantitativa. Para crearlo en ggplot2 se utiliza la geometría geom_line().\n\ndata_cases_tiroides |&gt; \n ggplot(aes(year,rate)) +\n   geom_line()\n\n\n\n\n\n7.1.1 Agrupar datos por variable categórica\nAl crear el gráfico en ggplot2 se muestra un gráfico cuyos valores generan una forma que muestra una especie de variación en los datos por cada año, estos se debe a que se están graficando todos los casos de el dataframe, sin embargo, los datos contienen una variable categórica llamada cases, la cual podemos colocar en la estética utilizandola como grupo group=cases, esto permitirá gráficar los datos separados por grupo.\n\ndata_cases_tiroides |&gt; \n  ggplot(aes(year,\n             rate, \n             group=cases)) +\n   geom_line()\n\n\n\n\n\n\n7.1.2 Modificar color de línea del gráfico\n Para modificar el color de línea de cada gráfico utilizaremos la propiedad color y la misma variable categórica que usamos para separar los grupos, color=case, el cual no solo mostrará diferentes colores de línea sino una leyenda de los grupos.\n\ndata_cases_tiroides |&gt; \n ggplot(aes(year,\n            rate, \n            group=cases,\n            color=cases)) +\n   geom_line()\n\n\n\n\n\n\n7.1.3 Modificar el grosor de línea\nPodemos modificar el grosor de las líneas del gráfico colocando en la propiedad linewidth=1.\n\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, \n          rate, \n          group=cases, \n          color=cases)) +\n    geom_line(linewidth=1)\n\n\n\n\n\n\n7.1.4 Añadir geometría de puntos\nPodemos añadir otra geometría al gráfico, en particular, la geometría de puntos utilizando geom_point() antes o después de geom_line().  A la geometría de punto le colocamos solo el tamaño con valor a size=3.\n\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, \n             rate, \n             group=cases, \n             color=cases)) +\n    geom_line(linewidth=1)+\n    geom_point(size=3)\n\n\n\n\n\n\n7.1.5 Añadir geometría de puntos, shape\nPodemos modificar la forma de los puntos utilizando valores entre 1 al 25, en este caso la forma 21 es un círculo sin relleno.\n\n# Grafico de lineas y puntos con circulo sin relleno\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, \n             rate, \n             group=cases, \n             color=cases)) +\n    geom_line(linewidth=1)+\n    geom_point(size=3, \n               shape=21)\n\n\n\n\n\n\n7.1.6 Añadir geometría de puntos, shape ,color\nSi queremos rellenar los puntos de la forma shape, podemos hacerlo utilizando colores personalizados (pueden ser diferente tanto en el relleno fill como en el color de la línea de la forma color).  Si queremos utilizar el mismo color de las líneas en el punto entonces debemos utilizar en fill y color la variable categórica que separa los grupos de líneas cases.\n\n# Grafico de lineas y puntos con circulo con relleno\n# Color personalizado\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, \n             rate, \n             group=cases, \n             color=cases)) +\n    geom_line(linewidth=1)+\n    geom_point(size=3, \n               shape=21, \n               color=\"red\", \n               fill=\"red\")\n\n\n\n# Grafico de lineas y puntos con circulo con relleno\n# Color según variables categóricas\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, \n             rate, \n             group=cases, \n             color=cases)) +\n    geom_line(linewidth=1)+\n    geom_point(size=3, \n               shape=21, \n               aes(color=cases, \n                   fill=cases))\n\n\n\n\n\n\n7.1.7 Modificar leyenda del gráfico\nModificamos las etiquetas de los datos de la leyenda de forma manual con scale_fill_manual. En este caso el color esta dado por dos valores, asi que le decimos a ggplot que los dos grupos de valores serán: labels = c(“Muertos”, “Nuevos Casos”) para los textos de la leyenda y para los colores de las líneas y circulos c(“red”, “blue”). Ahora se mostrarán dos leyendas de color” y fill, por lo que debemos eliminar una de las dos.\n\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, \n             rate, \n             group=cases, \n             color=cases)) +\n    geom_line(size=1)+\n    geom_point(size=3, \n               shape=21, \n               aes(color=cases, \n                   fill=cases))+\n   scale_fill_manual(labels = c(\"Muertos\", \"Nuevos Casos\"), \n                     values = c(\"red\", \"blue\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n Eliminamos una de las leyendas con color = “none” y modificamos el título de la leyenda que dejamos con fill = guide_legend(“Casos”).  Es importante resaltar que el código aes(color=cases, fill=cases) genera los colores según el número de líneas, no puede eliminarse aunque hayamos asignados nuevos colores, esto es porque le dicen al ggplot a través de la variable cases asignada que son dos colores que hay que generar, sin esta identificación no se cambiarióa los colores values = c(“red”, “blue”).\n\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, rate, \n             group=cases, \n             color=cases)) +\n    geom_line(size=1)+\n    geom_point(size=3, \n               shape=21, \n               aes(color=cases,\n                   fill=cases))+\n  scale_fill_manual(labels = c(\"Muertos\", \"Nuevos Casos\"), values = c(\"red\", \"blue\"))+\n  guides(color = \"none\", \n         fill = guide_legend(\"Casos\")) \n\n\n\n\n\n\n7.1.8 Añadir componentes al gráfico\nUtilizando la función labs() podemos añadir título al gráfico, subtitulo, etiquetas a las coordenadas, texto de la fuente de datos y valores en los puntos.\n\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, \n             rate, \n             group=cases, \n             color=cases)) +\n    geom_line(size=1)+\n    geom_point(size=3, \n               shape=21, \n               aes(color=cases, \n                   fill=cases))+\n    scale_fill_manual(labels = c(\"Muertos\", \"Nuevos Casos\"), \n                      values = c(\"red\", \"blue\"))+\n    guides(color = FALSE, \n           fill = guide_legend(\"Casos\")) +\n    labs(title=\"Detección del cáncer de tiroides en EE. UU. entre los años 1975 y 2012\",\n         subtitle=\"Nivel de casos nuevos y mortandad\", \n         caption=\"fuente: C. I. Bliss (1952) The Statistics of Bioassay. Academic Press.\", \n         y=\"Números de nuevos casos\\n por 100,000 habitantes\", \n         x=\"Años\")+\n    geom_text(aes(label =  rate), \n              nudge_y = 0.65, \n              size=2, \n              color=\"#2e282b\") \n\nWarning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n\n\n\n\n\n7.1.9 Añadir Themes a los graficos en ggplot\nPodemos personalizar el gráfico utilizando algunos de los temas de ggplot. en este ejemplo theme_light().\n\ndata_cases_tiroides |&gt; \n  ggplot(aes(year, \n             rate, \n             group=cases, \n             color=cases)) +\n    geom_line(size=1)+\n    geom_point(size=3, \n               shape=21, \n               aes(color=cases, \n                   fill=cases))+\n    scale_fill_manual(labels = c(\"Muertos\", \"Nuevos Casos\"), \n                      values = c(\"red\", \"blue\"))+\n    guides(color = FALSE, \n           fill = guide_legend(\"Casos\")) +\n    labs(title=\"Detección del cáncer de tiroides en EE. UU. entre los años 1975 y 2012\",\n         subtitle=\"Nivel de casos nuevos y mortandad\", \n         caption=\"fuente: C. I. Bliss (1952) The Statistics of Bioassay. Academic Press.\", \n         y=\"Números de nuevos casos\\n por 100,000 habitantes\", \n         x=\"Años\")+\n    theme_light()\n\n\n\n\n\n\n7.1.10 PRACTICA 1\nGenere dos gráfico de líneas uno para cada caso de la variable CASES. Para ello debe hacer dos subgrupo filtrado por cases = =Deaths_US  y cases == NewCases , utilizar cun subgrupo en cada gráfico.\n\n\n7.1.11 PRACTICA 2\nCree un gráfico de los casos igual al mostrado en este documento, modificando , el color , la forma de los puntos y seleccionando otro theme."
  },
  {
    "objectID": "tema-ggplot-area.html#gráfico-de-área-en-r",
    "href": "tema-ggplot-area.html#gráfico-de-área-en-r",
    "title": "8  Gráficos de densidad y Area",
    "section": "8.1 Gráfico de área en R",
    "text": "8.1 Gráfico de área en R\nSe pueden construir gráfico de área en ggplot2 utilizando la geometría geom_density() el cual requiere solo 1 variable numérica como entrada. En este ejemplo se utiliza la variable númerica Age y se muestra una distribución de la edad de los pasajeros del Titanic. La mayor densidad de datos está en el rango de edad de 15 a 45.\n\n\n8.1.1 Gráfico de histograma de la edad de los pasajeros del titanic\n\n# grafico de área\ntitanic |&gt; \n  ggplot(aes(Age))+\n  geom_density()\n\nWarning: Removed 263 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\nAl crear este gráfico de área R envia el mensaje:  Warning  Removed 263 rows containing non-finite values (stat_bin).  Indica que se han omitido 263 valores de la variable Age por ser valores nulos. \n\n\n8.1.2 Modificar color y tamaño de la línea del gráfico\nPodemos cambiar el color de la línea del grafico y el tamaño de la línea en la geometría.\n\n#graficos de area \n\ntitanic |&gt; \n  ggplot(aes(Age))+\n  geom_density(color=\"#589652\", \n               size=2)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Removed 263 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n8.1.3 Color de relleno en el gráfico\nPOdemos modificar el color de relleno del gráfico de densidad utilizando nombre de los colores o colores hexadecimales y la propiedad fill en la geom_density().\n\n#graficos de area \ntitanic |&gt; \n  ggplot(aes(Age))+\n  geom_density(color= \"red\",\n               fill=\"#589652\")\n\n\n\n\n\n\n8.1.4 Gráfico con variable cuantitativa Age y categorica Sex.\nSe utiliza la variable categórica sex para crear grupos de datos en las estética de datos a través del relleno del gráfico fill =Sex, esto permite agrupar los datos por la variable categórica y generar dos gráficos de área.\n\ntitanic |&gt; \n  ggplot(aes(Age, \n             fill=Sex))+\n  geom_density()\n\nWarning: Removed 263 rows containing non-finite outside the scale range\n(`stat_density()`)."
  },
  {
    "objectID": "tema-ggplot-area.html#superponer-gráficos-de-área",
    "href": "tema-ggplot-area.html#superponer-gráficos-de-área",
    "title": "8  Gráficos de densidad y Area",
    "section": "8.2 Superponer gráficos de área",
    "text": "8.2 Superponer gráficos de área\nSe puden superponer los gráficos y mostrar ambos utilizando la estética alpha en la geometría. En el gráfico de densidad se puede ver que existe una dispersión de datos (ancho del grafico) similar aunque los datos del grupo femenino están ligeramente más dispersos y una centralidad de datos, que indica la media de datos, ligeramente mayor en los hombres. Esto puede indicar que la media de edad de los varones es mayor que el de las mujeres.\n\ntitanic |&gt; \n  ggplot(aes(Age, \n             fill=Sex))+\n    geom_density(alpha=0.45)\n\n\n\n\n\n8.2.1 Extrae subgrupo de datos por sexo y calculo de la media\nAl crear subgrupo de datos por sexo, obtenemos dos nuevos dataFrames, female y male. Si utilizamos la función mean()podemos calcular la media de los datos de la variable Age de la siguiente forma mean(female$Age).\n\n#subgrupo de datos por sexo\nfemale &lt;- subset(titanic, titanic$Sex==\"female\")\nmale &lt;- subset(titanic, titanic$Sex==\"male\")\nnrow(female)\n\n[1] 466\n\nnrow(male)\n\n[1] 843\n\n#media de subgrupo de datos son valores nulos\n# el resultado será NA \nmean(female$Age)\n\n[1] NA\n\nmean(male$Age)\n\n[1] NA\n\n\n Si ejecutamos la función summary()&gt; podemos ver un resumen de los datos, donde en la variable Age indica 263 valores nulos, este impide que podamos utilizar funciones aritméticas como mean() para hacer cálculos.\n\n#Resumen de datos donde la variable AGE tiene valores nulos o NA\nsummary(titanic)\n\n     Pclass         Survived         Name               Sex           \n Min.   :1.000   Min.   :0.000   Length:1309        Length:1309       \n 1st Qu.:2.000   1st Qu.:0.000   Class :character   Class :character  \n Median :3.000   Median :0.000   Mode  :character   Mode  :character  \n Mean   :2.295   Mean   :0.382                                        \n 3rd Qu.:3.000   3rd Qu.:1.000                                        \n Max.   :3.000   Max.   :1.000                                        \n                                                                      \n      Age              Sibsp            Parch          Ticket         \n Min.   : 0.1667   Min.   :0.0000   Min.   :0.000   Length:1309       \n 1st Qu.:21.0000   1st Qu.:0.0000   1st Qu.:0.000   Class :character  \n Median :28.0000   Median :0.0000   Median :0.000   Mode  :character  \n Mean   :29.8811   Mean   :0.4989   Mean   :0.385                     \n 3rd Qu.:39.0000   3rd Qu.:1.0000   3rd Qu.:0.000                     \n Max.   :80.0000   Max.   :8.0000   Max.   :9.000                     \n NA's   :263                                                          \n      Fare            Cabin             Embarked             Boat          \n Min.   :  0.000   Length:1309        Length:1309        Length:1309       \n 1st Qu.:  7.896   Class :character   Class :character   Class :character  \n Median : 14.454   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 33.295                                                           \n 3rd Qu.: 31.275                                                           \n Max.   :512.329                                                           \n NA's   :1                                                                 \n      body        home.dest        \n Min.   :  1.0   Length:1309       \n 1st Qu.: 72.0   Class :character  \n Median :155.0   Mode  :character  \n Mean   :160.8                     \n 3rd Qu.:256.0                     \n Max.   :328.0                     \n NA's   :1188                      \n\n\n\n\n8.2.2 Eliminar valores nulos NA y calculo de la media de grupos Sex\nPodemos utilizar dentro de la funciones aritméticas la función na.omit(variable) para eliminar los valores nulos de la variable Age. De esta forma calculamos la media de datos para identificar cual grupo tiene un valor central mayor:  female: 28.68 male 30.58 \n\n#media de subgrupo de datos sin valores nulos\nmean(na.omit(female$Age))\n\n[1] 28.68707\n\nmean(na.omit(male$Age))\n\n[1] 30.58523\n\n#mediana \nmedian(na.omit(female$Age))\n\n[1] 27\n\nmedian(na.omit(male$Age))\n\n[1] 28\n\n\n\n\n8.2.3 Datos de la media en el gráfico\nMostrar la media de los datos por grupo sex en el gráfico de densidad con la capa geom_vline(). Se añadio el título y se cambio los valores de la etiqueta del eje x, como tambien se modificó la etiqueta de la leyenda. \n\ntitanic |&gt; \n  ggplot(aes(Age, \n             fill=Sex))+\n  geom_density(alpha=0.25)+\n  geom_vline(aes(xintercept=mean(na.omit(female$Age)), \n                 color=\"blue\"),\n             linetype=\"dashed\", size=1) +\n  geom_vline(aes(xintercept=mean(na.omit(male$Age)), \n                 color=\"red\"),\n             linetype=\"dashed\", size=1) +\n  labs(title=\"Grafico de área de datos por Edad y Sexo\",\n       x=\"Edad(año)\", \n       y = \"Density\")\n\n\n\n\n\n\n8.2.4 Gráfico de área por edad en faceta de la variable Sexo\nEn el siguiente ejemplo utilizaremos para separar los gráficos de área las facetas, particularmente la función facet_wrap() con la variable categórica sex de la siguiente forma, facet_wrap(~Sex, ncol=1), esto generá las facetas por fila, pero debemos utilizar el valor n=col para indicar que solo tendrá una columna.\n\ntitanic |&gt; \n  ggplot(aes(Age, \n             fill=Sex))+\n  geom_density(alpha=0.25)+\n  geom_vline(aes(xintercept=mean(na.omit(Age)), \n                 color=\"blue\"),\n             linetype=\"dashed\", \n             size=1) +\n  labs(title=\"Grafico de área de datos por Edad y Sexo\",\n       x=\"Edad(año)\", \n       y = \"Density\")+\n  guides(fill = guide_legend(\"Sexo\"), \n         color = FALSE)+\n  facet_wrap(~Sex, ncol=1)\n\nWarning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\nWarning: Removed 263 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n8.2.5 Gráfico de área por edad en faceta de la variable Sexo - opcion 2\nUtilizaremos una sola función geom_vline(), adicional que el cálculo de la media no se realizará por cada grupo, sino solo de la variable seleccionada mean(na.omit(Age).  El resultado muestra en apariencia que la línea de la media del sexo femenino es igual a la del sexo masculino, y esto es un error en el gráfico.\n\nmedia_ &lt;- titanic |&gt; \n  group_by(Sex) |&gt; \n  summarise(media=mean(na.omit(Age)))\n\nmedia_\n\n# A tibble: 2 × 2\n  Sex    media\n  &lt;chr&gt;  &lt;dbl&gt;\n1 female  28.7\n2 male    30.6\n\ntitanic |&gt; \n  ggplot(aes(Age, \n             fill=Sex))+\n  geom_density(alpha=0.25)+\n  geom_vline(aes(xintercept=mean(na.omit(Age)), \n                 color=\"red\"),\n             linetype=\"dashed\", \n             size=1) +\n  labs(title=\"Grafico de área de datos por Edad y Sexo\",\n       x=\"Edad(año)\", \n       y = \"Density\")+\n  guides(fill = guide_legend(\"Sexo\"), \n         color = FALSE)+\n  facet_wrap(~Sex, ncol=1)\n\n\n\n\n Este error lo podemos corregir creando un nuevo dataframe que calcula la media por cada categoria de la variable sex, este dataframe llamado mean_, lo utilzaremos con la función geom_vline(data=media_, aes(xintercept=media, color=Sex)) , donde los valores de data representan el dataframe calculado, xintercept, contiene el cálculo de la media por sex y color.\n\n# calculo de la media por sexo\nmedia_ &lt;- titanic |&gt; \n  group_by(Sex) |&gt; \n  summarise(media=mean(na.omit(Age)))\n\nmedia_\n\n# A tibble: 2 × 2\n  Sex    media\n  &lt;chr&gt;  &lt;dbl&gt;\n1 female  28.7\n2 male    30.6\n\ntitanic |&gt; \n  ggplot(aes(Age, \n             fill=Sex))+\n  geom_density(alpha=0.25)+\n  geom_vline(data=media_, \n             aes(xintercept=media, \n                 color=Sex),\n             linetype=\"dashed\", \n             size=1) +\n  labs(title=\"Grafico de área de datos por Edad y Sexo\",\n       x=\"Edad(año)\", \n       y = \"Density\")+\n  guides(fill = guide_legend(\"Sexo\"), \n         color = FALSE)+\n  facet_wrap(~Sex, ncol=1)\n\nWarning: Removed 263 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n8.2.6 Modificar etiqueta SEX y eliminar etiqueta color.\nAl generar las líneas de las media de cada grupo, se crea otra leyenda que indican los colores de la línea, esta leyenda la omitimos utilizando guides(color = “none”) .\n\ntitanic |&gt; \n  ggplot(aes(Age, \n             fill=Sex))+\n  geom_density(alpha=0.25)+\n  geom_vline(aes(xintercept=mean(na.omit(female$Age)),\n                 color=\"blue\"),\n             linetype=\"dashed\", size=1) +\n  geom_vline(aes(xintercept=mean(na.omit(male$Age)), \n                 color=\"red\"),\n             linetype=\"dashed\", size=1) +\n  labs(title=\"Grafico de área de datos por Edad y Sexo\",\n       x=\"Edad(año)\", \n       y = \"Density\")+\n  guides(fill = guide_legend(\"Sexo\"), \n         color = FALSE)\n\n\n\n\n\n\n8.2.7 Agrupar gráficos de densidad\nPara agrupar graficos de densidad se debe utilizar la función position = “stack” en la geometría, este permite apilar un gráfico sobre otro.\n\ntitanic |&gt; \n  ggplot(aes(Age, fill=Sex))+\n  geom_density(alpha=0.25 , \n               position = \"stack\")+\n  geom_vline(aes(xintercept=mean(na.omit(female$Age)), \n                 color=\"blue\"),\n             linetype=\"dashed\", size=1) +\n  geom_vline(aes(xintercept=mean(na.omit(male$Age)), \n                 color=\"red\"),\n             linetype=\"dashed\", size=1) +\n  labs(title=\"Grafico de densidad de datos por Edad y Sexo\",\n       x=\"Edad(año)\", \n       y = \"Density\")+\n  guides(fill = guide_legend(\"Sexo\"), \n         color = \"none\")\n\n\n\n\n\n\n8.2.8 PRÁCTICA 1\nCrear un gráfico de densidad con la variable FARE y categorica Sex\n\n\n8.2.9 PRACTICA 2\nCreo un gráfico de densidad con la variable FARE y categorica Sex  Utilice en la geometria la estetica kernel = c(kernel=“gaussian”).\n\n\n8.2.10 PRACTICA 3\nCalcule la media y los datos de pasajeros del sexo masculino, mayores y menores que la media. Muestre los 10 primeros datos."
  },
  {
    "objectID": "tema-plot-themes.html#cargar-librerias",
    "href": "tema-plot-themes.html#cargar-librerias",
    "title": "9  Temas para gráficos en ggplot",
    "section": "9.1 Cargar librerias",
    "text": "9.1 Cargar librerias\nLibrerias necesarias que se deben haber instalado previamente con install.packages(nombre del paquete) o en el panel Package.\n\nlibrary(tidyverse) # incluye ggplot2\nlibrary(readxl) # funciones para importar xlsx\nlibrary(janitor) # funciones de limpieza\nlibrary(patchwork) #combinar gráficos de ggplot\nlibrary(ggExtra)\nlibrary(ggthemes) # nuevas temas para los \nlibrary(plotly) #gráficos interactivos # remotes::install_github(\"plotly/plotly\")\nlibrary(tibble)\nlibrary(skimr) # reseumen numerico\nlibrary(modeest)\nlibrary(ggrepel) # añadir etiquetas a los gráficos\nlibrary(RColorBrewer) #paletas de colores\nlibrary(ggthemes)"
  },
  {
    "objectID": "tema-plot-themes.html#carga-de-datos",
    "href": "tema-plot-themes.html#carga-de-datos",
    "title": "9  Temas para gráficos en ggplot",
    "section": "9.2 Carga de datos",
    "text": "9.2 Carga de datos\nSe utilizará los datos de estudio de lectura y matemática de las escuelas de Miami en 2012 y 2013 por grado y Distrito llamado SchoolsMiamiDade.\nSignificado de las variables del dataframe SchoolsMiamiDade  Escuelas de Miami con notas promedio en las materias de lectura y matematica en los años 2012 y 2013.\n\nSchoolsMiamiDade&lt;- read.csv(\"data/SchoolsMiamiDade.csv\")\nSchoolsMiamiDade &lt;- as_tibble(SchoolsMiamiDade)\nhead(SchoolsMiamiDade,5)\n\n# A tibble: 5 × 9\n  SchoolName BoardDistrict SchoolGrade Reading2012 Reading2013 ReadingDifference\n  &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;             &lt;int&gt;       &lt;int&gt;             &lt;int&gt;\n1 0041 AIR … (9)           A                    82          80                -2\n2 0070 CORA… (9)           A                    71          73                 2\n3 0071 EUGE… (5)           A                    69          69                 0\n4 0072 SUMM… (9)           B                    57          50                -7\n5 0073 MAND… (9)           C                    34          32                -2\n# ℹ 3 more variables: Math2012 &lt;int&gt;, Math2013 &lt;int&gt;, MathDifference &lt;int&gt;"
  },
  {
    "objectID": "tema-plot-themes.html#temas-themes-en-ggplot",
    "href": "tema-plot-themes.html#temas-themes-en-ggplot",
    "title": "9  Temas para gráficos en ggplot",
    "section": "9.3 Temas (Themes) en ggplot",
    "text": "9.3 Temas (Themes) en ggplot\nLos temas, son una forma de personalizar los componentes que no son datos en los gráficos, componentes como, títulos, etiquetas, fuentes, fondo, líneas de cuadrícula y leyendas. Se pueden utilizar temas para dar a las tramas un aspecto personalizado coherente. Si bien es posible personalizar los temas a través de las propiedades de la función theme(), ggplot2 integra siete temas que permiten personalizar el gráfico, añadiendo una nueva capa del tema seleccionado al gráfico. \nA continuación se mostrará los temas predeterminados de ggplot y otros temas de otras librerias.\n\n9.3.1 theme_bw()\nEs una variación theme_grey() que utiliza un fondo blanco y finas líneas de cuadrícula grises.\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_bw()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n9.3.2 theme_linedraw()\nTema con solo líneas negras de varios anchos sobre fondos blancos, que recuerda a un dibujo lineal.\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_linedraw()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n9.3.3 theme_light()\nSimilar theme_linedraw()pero con líneas y ejes de color gris claro, para dirigir más atención a los datos.\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_light()\n\n\n\n\n\n\n9.3.4 theme_dark()\nVersión oscura de theme_light(), con tamaños de línea similares pero un fondo oscuro. Útil para hacer resaltar líneas finas de colores.\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_dark()\n\n\n\n\n\n\n9.3.5 theme_minimal()\nUn tema minimalista sin anotaciones de fondo.\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n theme_minimal()\n\n\n\n\n\n\n9.3.6 theme_classic()\nUn tema de aspecto clásico, con líneas de eje x e y y sin líneas de cuadrícula.\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_classic()"
  },
  {
    "objectID": "tema-plot-themes.html#ggthemes",
    "href": "tema-plot-themes.html#ggthemes",
    "title": "9  Temas para gráficos en ggplot",
    "section": "9.4 ggthemes",
    "text": "9.4 ggthemes\nggthemes es una libreria que contiene un conjunto de 20 temas diferentes que tienen el mismo funcionamiento de los temas predeterminado de ggplot.\n\n9.4.1 Ejemplos de temas en ggthemes\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_foundation()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_excel_new()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_excel()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_economist_white()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_solarized()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_economist()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_calc()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nSchoolsMiamiDade |&gt; \n  ggplot(aes(Reading2012,Math2012))+\n  geom_point(color=\"salmon\") +\n  theme_base()\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliografía",
    "section": "",
    "text": "Quarto\nR for Data Science\nRmarkdown\nPalmerPenguins\nRcharts\nRgraph\nGallery Book\nggplot Book\nAwesome ggplot2\nVideo Datos pinguinos"
  }
]